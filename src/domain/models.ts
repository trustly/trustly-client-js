// noinspection JSUnusedGlobalSymbols
// Generated by Omnigen @ 2024-09-06T06:36:06.705Z

export interface WithRejection<TResult, TRejected> {
  result?: TResult | undefined;
  rejected?: TRejected | undefined;
}

export interface WithdrawResponseData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
  /**
   * The URL that should be loaded so that the end-user can continue with the interactive process. Please see our general guidelines around iFraming, nativeApps etc for best usability. In general, never iFrame the url for mobile devices.
   */
  url: string;
}

/**
 * The html target/frame-name. Only _top, _self and _parent are supported.
 */
export enum UrlTarget {
  TOP = '_top',
  SELF = '_self',
  PARENT = '_parent',
}

export interface WithdrawRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
  /**
   * The ISO 3166-1-alpha-2 code of the end-user's country. This will be used for pre-selecting the country for the end-user in the iframe.
   * Note: This will only have an effect for new end-users. If an end-user has done a previous order (with the same EndUserID), the country that was last used will be pre-selected.
   */
  Country: string;
  /**
   * The end-users localization preference in the format language[_territory]. Language is the ISO 639-1 code and territory the ISO 3166-1-alpha-2 code.
   */
  Locale: string;
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement: string;
  /**
   * The email address of the end user.
   */
  Email?: string | undefined;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The IP-address of the end-user.
   */
  IP?: string | undefined;
  /**
   * The URL to which the end-user should be redirected after a successful deposit.  Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  SuccessURL: string;
  /**
   * The URL to which the end-user should be redirected after a failed  deposit. Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  FailURL: string;
  /**
   * The TemplateURL should be used if you want to design your own payment page but have it hosted on Trustly's side. The URL of your template page should be provided in this attribute in every Deposit API call. Our system will then fetch the content of your template page, insert the Trustly iframe into it and host the entire page on Trustlyâ€™s side. In the response to the Deposit request, you will receive a URL to the hosted template page which you should redirect the user to (the hosted page cannot be put inside an iframe).
   */
  TemplateURL?: string | undefined;
  /**
   * The html target/frame-name of the SuccessURL. Only _top, _self and _parent are supported.
   */
  URLTarget?: UrlTarget | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * This attribute disables the possibility to change/type in national identification number when logging in to a Swedish bank. If this attribute is sent, the attribute NationalIdentificationNumber needs to be correctly included in the request.  Note: This is only available for Swedish banks.
   */
  UnchangeableNationalIdentificationNumber?: string | undefined;
  /**
   * If you are using Trustly from within your native iOS app, this attribute should be sent so that we can redirect the users back to your app in case an external app is used for authentication (for example Mobile Bank ID in Sweden).
   */
  URLScheme?: string | undefined;
  /**
   * When rendering the Trustly Checkout in a native app you are required to pass your application's url as an attribute to the order initiation request. By doing so, Trustly can redirect users back to your app after using external identification apps such as Mobile BankID: Please visit documentation site for more information. It must not be included for transactions that are not originating from an app.
   * <p>
   * NOTE! This value is only used for redirecting users back to the native app within the flows. See also SuccessURL and FailURL descriptions.
   */
  ReturnToAppURL?: string | undefined;
  /**
   * The minimum amount the end-user is allowed to deposit in the currency specified by Currency.Only digits. Use dot (.) as decimal separator.
   */
  SuggestedMinAmount?: string | undefined;
  /**
   * The maximum amount the end-user is allowed to deposit in the currency specified by Currency. Only digits. Use dot (.) as decimal separator.
   */
  SuggestedMaxAmount?: string | undefined;
  /**
   * Sets a fixed withdrawal amount which cannot be changed by the end-user in the Trustly iframe. If this attribute is not sent, the end-user will be asked to select the withdrawal amount in the Trustly iframe. Do not use in combination with <code>suggestedMinAmount</code> and <code>suggestedMaxAmount</code>. Use dot(.) as decimal separator.
   */
  SuggestedAmount?: string | undefined;
  /**
   * The end-user's date of birth.
   */
  DateOfBirth?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressCountry?: string | undefined;
  /**
   * The postalcode of the recipient address.
   */
  AddressPostalCode?: string | undefined;
  /**
   * The city of the recipient address.
   */
  AddressCity?: string | undefined;
  /**
   * Recipient address street
   */
  AddressLine1?: string | undefined;
  /**
   * Additional address information of the recipient.
   */
  AddressLine2?: string | undefined;
  /**
   * The entire shipping address.
   * This attribute should only be used if you are unable to provide the shipping address information in the 5 separate properties: <code>AddressCountry, </code>AddressCity<code>, </code>AddressPostalCode<code>, </code>AddressLine1, <code>AddressLine2</code>
   */
  Address?: string | undefined;
  /**
   * The ExternalReference is a reference set by the merchant for any purpose and does not need to be unique for every API call. For example, it can be used for invoice references, OCR numbers and also for offering end users the option to part-pay an invoice using the same ExternalReference. The ExternalReference will be included in version 1.2 of the settlement report, <code>ViewAutomaticSettlementDetailsCSV</code>.
   */
  ExternalReference?: string | undefined;
  /**
   * Human-readable identifier of the consumer-facing merchant (e.g. legal name or trade name)
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchant?: string | undefined;
  /**
   * URL of the consumer-facing website where the order is initiated
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchantURL?: string | undefined;
  /**
   * VISA category codes describing the merchant's nature of business.
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express account. It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  MerchantCategoryCode?: string | undefined;
  /**
   * Information about the Payer (ultimate debtor). This is required for some merchants and partners. SenderInformation is mandatory to send in Attributes{} for money transfer services (including remittance houses), e-wallets, prepaid cards, as well as for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account (other cases may also apply).
   */
  SenderInformation?: SenderInformation | undefined;
}

export interface SwishResponseData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
  /**
   * The URL that should be loaded so that the end-user can continue with the interactive process. Please see our general guidelines around iFraming, nativeApps etc for best usability. In general, never iFrame the url for mobile devices.
   */
  url?: string | undefined;
  qrcode?: string | undefined;
}

export enum SwishCancelReason {
  /**
   * The request was declined
   */
  DECLINED = 'DECLINED',
  /**
   * The request was cancelled
   */
  CANCELED = 'CANCELED',
  /**
   * There was an error during the request
   */
  ERROR = 'ERROR',
}

export enum StringBoolean {
  FALSE = '0',
  TRUE = '1',
}

export interface SwishRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The Swish number of the payee.
   * @example 1231181189
   */
  MerchantSwishNumber: string;
  UseMobile?: StringBoolean | undefined;
  /**
   * The URL to which the end-user should be redirected after a successful deposit.  Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  SuccessURL?: string | undefined;
  /**
   * The URL to which the end-user should be redirected after a failed  deposit. Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  FailURL?: string | undefined;
  /**
   * The amount to deposit with exactly two decimals in the currency specified by Currency. Do not use this attribute in combination with<code>suggestedMinAmount</code> and <code>suggestedMaxAmount</code>. Only digits. Use dot (.) as decimal separator.
   */
  Amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
  /**
   * Merchant supplies a message about the payment/order. Max 50 characters. Common allowed characters are the letters a-oÌˆ, A-OÌˆ, the numbers 0-9, and special characters !?(),.-:;
   */
  Message?: string | undefined;
  /**
   * The registered cellphone number of the person that makes the payment. It can only contain numbers and has to be at least 8 and at most 15 numbers. It also needs to match the following format in order to be found in Swish: country code + cell phone number (without leading zero).
   */
  MobilePhone?: string | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * Minimum age (in years) that the individual connected to the payerAlias has to be in order for the payment to be accepted. Value has to be in the range of 1 to 99.
   */
  AgeLimit?: string | undefined;
}

export interface SettlementReportResponseData {
  view_automatic_settlement_details: string;
}

/**
 * Required. The APIVersion. Must be "1.2". We also have older versions of the report, but those should not be implemented by new merchants.
 */
export enum SettlementReportRequestDataAttributesApiVersion {
  _1_2 = '1.2',
}

export interface SettlementReportRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * Required. The APIVersion. Must be "1.2". We also have older versions of the report, but those should not be implemented by new merchants.
   */
  APIVersion: SettlementReportRequestDataAttributesApiVersion;
}

export interface SelectAccountResponseData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the charge.
   */
  orderid?: number | undefined;
  /**
   * The URL that should be loaded so that the end-user can continue with the interactive process. Please see our general guidelines around iFraming, nativeApps etc for best usability. In general, never iFrame the url for mobile devices.
   */
  url?: string | undefined;
}

export interface ResponseResult<TData, TMethod extends string> {
  signature: string;
  uuid: string;
  data: TData;
  method: TMethod;
}

export interface RegisterAccountResponseData {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  accountid?: string | undefined;
  /**
   * The clearing house of the end-user's bank account. Typically the name of a country in uppercase letters. See examples or table at https://developers.trustly.com/emea/docs/registeraccount.
   */
  clearinghouse?: string | undefined;
  /**
   * The bank for this account
   */
  bank?: string | undefined;
  /**
   * A text that is safe to show the enduser for identifying the account. Do not parse this text since it will be a different format for different accounts.
   */
  descriptor?: string | undefined;
  [key: string]: unknown;
}

export interface RegisterAccountRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The end-user's date of birth.
   */
  DateOfBirth?: string | undefined;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressCountry?: string | undefined;
  /**
   * The postalcode of the recipient address.
   */
  AddressPostalCode?: string | undefined;
  /**
   * The city of the recipient address.
   */
  AddressCity?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressLine1?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressLine2?: string | undefined;
  /**
   * The entire shipping address.
   * This attribute should only be used if you are unable to provide the shipping address information in the 5 separate properties: <code>AddressCountry, </code>AddressCity<code>, </code>AddressPostalCode<code>, </code>AddressLine1, <code>AddressLine2</code>
   */
  Address?: string | undefined;
  /**
   * The email address of the end user.
   */
  Email?: string | undefined;
}

export interface RegisterAccountPayoutRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement: string;
  /**
   * The ExternalReference is a reference set by the merchant for any purpose and does not need to be unique for every API call. For example, it can be used for invoice references, OCR numbers and also for offering end users the option to part-pay an invoice using the same ExternalReference. The ExternalReference will be included in version 1.2 of the settlement report, <code>ViewAutomaticSettlementDetailsCSV</code>.
   */
  ExternalReference?: string | undefined;
  /**
   * Human-readable identifier of the consumer-facing merchant (e.g. legal name or trade name)
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchant?: string | undefined;
  /**
   * URL of the consumer-facing website where the order is initiated
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchantURL?: string | undefined;
  /**
   * VISA category codes describing the merchant's nature of business.
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express account. It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  MerchantCategoryCode?: string | undefined;
  /**
   * Information about the Payer (ultimate debtor). This is required for some merchants and partners. SenderInformation is mandatory to send in Attributes{} for money transfer services (including remittance houses), e-wallets, prepaid cards, as well as for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account (other cases may also apply).
   */
  SenderInformation?: SenderInformation | undefined;
  /**
   * The end-user's date of birth.
   */
  DateOfBirth?: string | undefined;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressCountry?: string | undefined;
  /**
   * The postalcode of the recipient address.
   */
  AddressPostalCode?: string | undefined;
  /**
   * The city of the recipient address.
   */
  AddressCity?: string | undefined;
  /**
   * Recipient address street
   */
  AddressLine1?: string | undefined;
  /**
   * Additional address information of the recipient.
   */
  AddressLine2?: string | undefined;
  /**
   * The entire shipping address.
   * This attribute should only be used if you are unable to provide the shipping address information in the 5 separate properties: <code>AddressCountry, </code>AddressCity<code>, </code>AddressPostalCode<code>, </code>AddressLine1, <code>AddressLine2</code>
   */
  Address?: string | undefined;
  /**
   * The email address of the end user.
   */
  Email?: string | undefined;
}

export interface RefundResponseData {
  /**
   * The OrderID specified when calling the method.
   */
  orderid: string;
  /**
   * "1" if the refund request is accepted by Trustly's system. If the refund request is not accepted, you will get an error code back in  <code>JsonRpcResponse</code> -&gt; <code>error</code>.
   */
  result: StringBoolean;
}

export interface RefundRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The ExternalReference is a reference set by the merchant for any purpose and does not need to be unique for every API call. For example, it can be used for invoice references, OCR numbers and also for offering end users the option to part-pay an invoice using the same ExternalReference. The ExternalReference will be included in version 1.2 of the settlement report, <code>ViewAutomaticSettlementDetailsCSV</code>.
   */
  ExternalReference?: string | undefined;
}

export enum RefundDirectDebitRejected {
  /**
   * The debit order wasn't found.
   */
  ERROR_CHARGE_NOT_FOUND = 'ERROR_CHARGE_NOT_FOUND',
  /**
   * The debit order is not refundable
   */
  ERROR_CHARGE_NOT_REFUNDABLE = 'ERROR_CHARGE_NOT_REFUNDABLE',
  /**
   * The amount is not valid, eg could be bigger than the debit.
   */
  ERROR_AMOUNT_FAILURE = 'ERROR_AMOUNT_FAILURE',
  /**
   * The currency does not match the original debit order.
   */
  ERROR_CURRENCY_FAILURE = 'ERROR_CURRENCY_FAILURE',
}

export enum RefundDirectDebitCancelReason {
  /**
   * The specified account is not valid, eg sending funds to it is not possible.
   */
  INVALID_ACCOUNT = 'INVALID_ACCOUNT',
  /**
   * All other failures
   */
  FAILED = 'FAILED',
}

export interface PendingRefundDirectDebitNotificationData extends AbstractPendingNotificationData {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid?: string | undefined;
  /**
   * Flag indicating that this is for Direct Debit refund. Note that this flag is not sent unless it's for a refund. Only value will be 1.
   */
  refund?: '1' | undefined;
}

export interface PendingDirectDebitNotificationData extends AbstractPendingNotificationData {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid?: string | undefined;
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  accountid?: string | undefined;
  /**
   * The expected payment date for the debit. Note that this gives you an indication if the paymentDate you submitted has been adjusted eg due to a bank holiday.
   */
  paymentdate?: string | undefined;
}

export interface PendingDirectCreditNotificationData extends AbstractPendingNotificationData {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid?: string | undefined;
}

export interface PendingDefaultNotificationData extends AbstractPendingNotificationData {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid?: string | undefined;
}

export interface PayoutFailedNotificationData extends AbstractNotificationRequestData {
  /**
   * @example 98.02
   */
  amount: number;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  currency: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid: string;
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   * @example 2014-01-30 13:28:45.652299+01
   * @example 2014-03-31 11:50:06.46106+00
   */
  timestamp: string;
  /**
   * Short code of the error
   */
  errorcode?: string | undefined;
  /**
   * Description of the error
   */
  errormessage?: string | undefined;
  attributes?: AnyAttributes | undefined;
}

export interface PayoutConfirmationNotificationData extends AbstractNotificationRequestData {
  /**
   * @example 98.02
   */
  amount: number;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  currency: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid: string;
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   * @example 2014-01-30 13:28:45.652299+01
   * @example 2014-03-31 11:50:06.46106+00
   */
  timestamp: string;
  attributes?: AnyAttributes | undefined;
}

export enum PartyTypeKind {
  PERSON = 'PERSON',
  ORGANISATION = 'ORGANISATION',
}

export interface RecipientOrSenderInformation {
  /**
   * Partytype can be <code>PERSON</code> or <code>ORGANISATION</code> (if the recipient or ultimate debtor is an organisation/company).
   */
  Partytype: PartyTypeKind;
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
  /**
   * The ISO 3166-1-alpha-2 code of the country that the recipient resides in.
   */
  CountryCode: string;
  /**
   * Payment account number or an alternative consistent unique identifier (e.g.customer number). Note: this is not a transaction ID or similar. This identifier must stay consistent across all transactions  relating to this recipient (payee).
   */
  CustomerID?: string | undefined;
  /**
   * Full address of the recipient, excluding the country.
   */
  Address?: string | undefined;
  /**
   * Date of birth (YYYY-MM-DD, ISO 8601) of the beneficiary, or organisational number for the organisation.
   */
  DateOfBirth?: string | undefined;
}

/**
 * The type of the order associated with the transaction, if available.Text See list of possible orderypes in the table below.
 */
export enum OrderType {
  /**
   * Order type for Deposit
   */
  DEPOSIT = 'Deposit',
  REFUND = 'Refund',
  CHARGE = 'Charge',
  WITHDRAW = 'Withdraw',
  ACCOUNT_PAYOUT = 'AccountPayout',
  DEPOSIT_FEE = 'Deposit Fee',
  REFUND_FEE = 'Refund Fee',
  CHARGE_FEE = 'Charge Fee',
  WITHDRAW_FEE = 'Withdraw Fee',
  SETTLEMENT_FEE = 'Settlement Fee',
  ACCOUNT_PAYOUT_FEE = 'AccountPayout Fee',
  FAILED_REFUND = 'Failed Refund',
  FAILED_REFUND_FEE = 'Failed Refund Fee',
  FX = 'FX',
  FLOAT_ADJUSTMENT = 'Float Adjustment',
  AUTOMATIC_FLOAT_ADJUSTMENT = 'Automatic Float Adjustment',
}

export interface SettlementReportResponseDataEntry {
  /**
   * The account the money was transferred from (if the amount is positive), or the account the money was transferred to (if the amount is negative).
   */
  accountName?: string | undefined;
  /**
   * The monetary amount of the transaction, rounded down to two decimal places.
   */
  amount?: number | undefined;
  /**
   * The three-letter currency code of the transaction.
   */
  currency?: string | undefined;
  /**
   * The timestamp of the transaction, including the UTC offset. As the timestamps are always in UTC, the offset is always +00
   */
  datestamp?: string | undefined;
  /**
   * MessageID of the order associated with the transaction, if available.
   */
  messageId?: string | undefined;
  /**
   * OrderID of the order associated with the transaction, if available.
   */
  orderid?: string | undefined;
  /**
   * The type of the order associated with the transaction, if available.Text See list of possible orderypes in the table below.
   */
  orderType?: OrderType | undefined;
  /**
   * Can be used in case there is an unknown order type that was received
   */
  orderTypeString?: string | undefined;
  /**
   * The sum of all amounts of the respective currency within the report.
   */
  total?: number | undefined;
  /**
   * The username of the child merchant account.
   */
  username?: string | undefined;
  /**
   * The amount that the end user paid, if the currency is different from the requested deposit currency. For transactions where the payment currency is the same as the requested currency, this field will be empty.
   */
  fxPaymentAmount?: number | undefined;
  /**
   * The currency that the user paid with, if the currency is different from the requested deposit currency. For transactions where the payment currency is the same as the requested currency, this field will be empty.
   */
  fxPaymentCurrency?: string | undefined;
  /**
   * The 10 digit reference that will show up on the merchant's bank statement for this automatic settlement batch. The same value will be sent on every row in the report.
   */
  settlementBankWithdrawalId?: string | undefined;
  /**
   * Contains the ExternalReference value for Deposit, Charge, and Refund transactions if provided. Otherwise empty.
   */
  externalReference?: string | undefined;
}

export enum NumberBoolean {
  /**
   * 0 for false
   */
  FALSE = 0,
  /**
   * 1 for true
   */
  TRUE = 1,
}

export interface SelectAccountRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
  /**
   * The ISO 3166-1-alpha-2 code of the end-user's country. This will be used for pre-selecting the country for the end-user in the iframe.
   * Note: This will only have an effect for new end-users. If an end-user has done a previous order (with the same EndUserID), the country that was last used will be pre-selected.
   */
  Country: string;
  /**
   * The end-users localization preference in the format language[_territory]. Language is the ISO 639-1 code and territory the ISO 3166-1-alpha-2 code.
   */
  Locale: string;
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement?: string | undefined;
  /**
   * The email address of the end user.
   */
  Email?: string | undefined;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The IP-address of the end-user.
   */
  IP?: string | undefined;
  /**
   * The URL to which the end-user should be redirected after a successful deposit.  Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  SuccessURL: string;
  /**
   * The URL to which the end-user should be redirected after a failed  deposit. Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  FailURL: string;
  /**
   * The TemplateURL should be used if you want to design your own payment page but have it hosted on Trustly's side. The URL of your template page should be provided in this attribute in every Deposit API call. Our system will then fetch the content of your template page, insert the Trustly iframe into it and host the entire page on Trustlyâ€™s side. In the response to the Deposit request, you will receive a URL to the hosted template page which you should redirect the user to (the hosted page cannot be put inside an iframe).
   */
  TemplateURL?: string | undefined;
  /**
   * The html target/frame-name of the SuccessURL. Only _top, _self and _parent are supported.
   */
  URLTarget?: UrlTarget | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * This attribute disables the possibility to change/type in national identification number when logging in to a Swedish bank. If this attribute is sent, the attribute NationalIdentificationNumber needs to be correctly included in the request.  Note: This is only available for Swedish banks.
   */
  UnchangeableNationalIdentificationNumber?: string | undefined;
  /**
   * If you are using Trustly from within your native iOS app, this attribute should be sent so that we can redirect the users back to your app in case an external app is used for authentication (for example Mobile Bank ID in Sweden).
   */
  URLScheme?: string | undefined;
  /**
   * When rendering the Trustly Checkout in a native app you are required to pass your application's url as an attribute to the order initiation request. By doing so, Trustly can redirect users back to your app after using external identification apps such as Mobile BankID: Please visit documentation site for more information. It must not be included for transactions that are not originating from an app.
   * <p>
   * NOTE! This value is only used for redirecting users back to the native app within the flows. See also SuccessURL and FailURL descriptions.
   */
  ReturnToAppURL?: string | undefined;
  /**
   * Only for Trustly Direct Debit. Request a direct debit mandate from the selected account. 1 or 0. See section "Direct Debit Mandates" for details. If this is set to 1, then <code>email</code> is required.
   */
  RequestDirectDebitMandate?: NumberBoolean | undefined;
  /**
   * The end-user's date of birth.
   */
  DateOfBirth?: string | undefined;
  /**
   * Human-readable identifier of the consumer-facing merchant (e.g. legal name or trade name)
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchant?: string | undefined;
  /**
   * URL of the consumer-facing website where the order is initiated
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchantURL?: string | undefined;
  /**
   * VISA category codes describing the merchant's nature of business.
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express account. It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  MerchantCategoryCode?: string | undefined;
}

export interface RegisterAccountPayoutResponseData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the charge.
   * @example 9594811343
   */
  orderid: number;
  /**
   * 1 if the payout could be accepted and 0 otherwise.
   */
  result: NumberBoolean;
}

export interface NotificationResponseDataBase<T> {
  message?: string | undefined;
  status: T;
}

export interface MerchantSettlementResponseData {
  /**
   * The unique reference generated for the settlement.
   */
  reference: string;
  [key: string]: unknown;
}

export enum MandateAccountSource {
  /**
   * Account details from AIS
   */
  AIS = 'AIS',
  /**
   * Manually inputed account number
   */
  MANUAL_ENTRY = 'MANUAL_ENTRY',
  /**
   * AccountID provided when creating the order
   */
  ACCOUNT_ID = 'ACCOUNT_ID',
  /**
   * If the scheme notifies about a change of account, this only aplies to BACS.
   */
  REGISTRATION_SCHEME = 'REGISTRATION_SCHEME',
}

export enum KYCNotificationResponseDataStatus {
  OK = 'OK',
  FINISH = 'FINISH',
  CONTINUE = 'CONTINUE',
}

export interface KYCNotificationDataAttributes extends AbstractRequestDataAttributes {
  /**
   * An ID that uniquely identifies the account holder. Only present in markets where SSN is applicable. Note: The format of this field will for some countries look different than the example.
   * @example SE198201019876
   * @example 19900501
   */
  personid: string;
  /**
   * First name of the person, or the name of the organization/company.
   */
  firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  lastname: string;
  /**
   * The end-user's date of birth.
   */
  dob: string;
  /**
   * Recipient address street
   * @example Main Street 1
   */
  street: string;
  /**
   * The postalcode of the recipient address.
   */
  zipcode: string;
  /**
   * The city of the recipient address.
   */
  city: string;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  country: string;
}

export interface KYCAbortNotificationData extends AbstractKYCNotificationData {
  abort: StringBoolean;
  /**
   * @example unverified
   * @example underage
   */
  abortmessage: string;
}

export interface JsonRpcNotificationParams<T> {
  /**
   * The signature that the Trustly server generated, which you can verify against with our public key
   */
  signature: string;
  /**
   * The unique identifier for this request
   */
  uuid: string;
  data: T;
}

export interface JsonRpcErrorResponse {
  version?: '1.1' | undefined;
  error: ErrorUnknownError;
  result?: null | undefined;
}

export interface JsonRpcErrorErrorData {
  [key: string]: unknown;
}

/**
 * Reasons for not being able to import the mandate
 */
export enum ImportDirectDebitReject {
  /**
   * AccountID not found
   */
  ERROR_ACCOUNT_NOT_FOUND = 'ERROR_ACCOUNT_NOT_FOUND',
  /**
   * mandate is not allowed for this account
   */
  ERROR_IMPORT_MANDATE_NOT_ALLOWED = 'ERROR_IMPORT_MANDATE_NOT_ALLOWED',
  /**
   * account can't be imported as it's blocked.
   */
  BANK_ACCOUNT_NUMBER_BLOCKED = 'BANK_ACCOUNT_NUMBER_BLOCKED',
  /**
   * account is invalid
   */
  ERROR_INVALID_ACCOUNT_NUMBER = 'ERROR_INVALID_ACCOUNT_NUMBER',
  /**
   * other reasons
   */
  ERROR_UNKNOWN = 'ERROR_UNKNOWN',
}

export interface GetWithdrawalsResponseDataEntry {
  /**
   * Reference code for the withdrawal generated by Trustly.
   */
  reference: string;
  /**
   * Date and time when the withdrawal was last updated.
   */
  modificationdate: string;
  /**
   * OrderID of the withdrawal
   */
  orderid: string;
  /**
   * Date and time when the withdrawal request was received.
   */
  datestamp: string;
  /**
   * The current state of the withdrawal.
   * It's important that no logic is built on the merchant side based on any specific transferState. New states can be added, and existing states can be changed or removed without notice.
   * @example EXECUTING
   * @example EXECUTED
   * @example PENDING
   * @example QUEUED
   * @example PREPARING
   * @example PREPARED
   * @example BOUNCED
   * @example ERROR
   * @example FAILED
   * @example RETURNED
   * @example CONFIRMED
   */
  transferstate: string;
  /**
   * The amount of the withdrawal.
   */
  amount: string;
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   * @example 1234567890
   * @example 7653385737
   */
  accountid: string;
  /**
   * The currency of the withdrawal.
   */
  currency: string;
  /**
   * The estimated date and time for when the funds will be available on the receiving bank account. If this information is not available it will be null.
   */
  eta?: string | undefined;
}

export interface DirectPaymentBatchRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * Date string in the ISO 8601 format (YYYY-MM-DD)
   */
  PaymentDate?: string | undefined;
  /**
   * The uploaded unique file name on the SFTP server containing the instructions.
   */
  BatchFile?: string | undefined;
  /**
   * The MD5 checksum for the file
   */
  Checksum?: string | undefined;
}

export enum DirectPaymentBatchRejected {
  /**
   * The account has not properly been configured.
   */
  ERROR_DIRECT_DEBIT_NOT_ALLOWED = 'ERROR_DIRECT_DEBIT_NOT_ALLOWED',
  /**
   * Invalid payment date.
   */
  ERROR_PAYMENT_DATE_FAILURE = 'ERROR_PAYMENT_DATE_FAILURE',
  /**
   * The file on the sftp server can't be interpreted.
   */
  ERROR_UNABLE_TO_READ_BATCH_FILE = 'ERROR_UNABLE_TO_READ_BATCH_FILE',
  /**
   * The file could not be found on the sftp server.
   */
  ERROR_MISSING_BATCH_FILE = 'ERROR_MISSING_BATCH_FILE',
  /**
   * The checksum for the file doesn't match.
   */
  ERROR_INVALID_CHECKSUM = 'ERROR_INVALID_CHECKSUM',
}

export enum DirectDebitTheme {
  DARK = 'DARK',
  LIGHT = 'LIGHT',
  DEFAULT = 'DEFAULT',
}

export enum DirectDebitRejected {
  /**
   * No matching active accountId
   */
  ERROR_MANDATE_NOT_FOUND = 'ERROR_MANDATE_NOT_FOUND',
  /**
   * Account not properly configured
   */
  ERROR_DIRECT_DEBIT_NOT_ALLOWED = 'ERROR_DIRECT_DEBIT_NOT_ALLOWED',
  /**
   * Payment date is invalid
   */
  ERROR_PAYMENT_DATE_FAILURE = 'ERROR_PAYMENT_DATE_FAILURE',
  /**
   * Amount is invalid or not within the configured range
   */
  ERROR_AMOUNT_FAILURE = 'ERROR_AMOUNT_FAILURE',
  /**
   * The mandate doesn't support the currency
   */
  ERROR_CURRENCY_FAILURE = 'ERROR_CURRENCY_FAILURE',
  /**
   * Invalid collection type
   */
  ERROR_COLLECTION_TYPE_FAILURE = 'ERROR_COLLECTION_TYPE_FAILURE',
}

export interface DirectDebitPaymentSchedule {
  [key: string]: unknown;
}

export interface DirectDebitMandateResponseData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
  /**
   * The URL that should be loaded so that the end-user can continue with the interactive process. Please see our general guidelines around iFraming, nativeApps etc for best usability. In general, never iFrame the url for mobile devices.
   */
  url: string;
}

export interface DirectDebitMandateRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  AccountId?: string | undefined;
  /**
   * This parameter in a way identifies the mandate you are to setup. If it's already used, you will receive an error, ERROR_MERCHANT_REFERENCE_ALREADY_EXISTS
   * which basically informs you that there's already a mandate with that reference.
   * <p>
   * [BACS]: The unique mandate reference. 6 - 10 characters consisting of A-Z and 0-9. Can not begin with DDIC and neither consists of the same characters, eg. AAAAAAA.
   * [Bankgiro]: The unique mandate reference. This must be numeric and unique for the payer, eg nationalId or similar can be used. Format needs to follow regexp [1-9][0-9]{5-15}
   * [SEPA-DD]: The unique mandate reference. This must be unique for the end-user for you as a merchant. Format needs to follow regexp [0-9,a-z,A-Z]{10-35}
   * @example 123ABC0123
   */
  MerchantReference: string;
  /**
   * The country where the mandate is to be created.
   */
  Country: string;
  /**
   * The first name of the end user.
   * [BACS]: Only mandatory if manual entry should be enabled.
   * [Bankgiro]: Mandatory
   * [Sepa-DD]: Mandatory
   */
  Firstname?: string | undefined;
  /**
   * The last name of the end user.
   * [BACS]: Only mandatory if manual entry should be enabled.
   * [Bankgiro]: Mandatory
   * [Sepa-DD]: Mandatory
   */
  Lastname?: string | undefined;
  /**
   * The email address of the end user.
   * @example test@trustly.com
   */
  Email: string;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The URL to which the end-user should be redirected after a successful deposit.  Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  SuccessURL: string;
  /**
   * The URL to which the end-user should be redirected after a failed  deposit. Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  FailURL: string;
  /**
   * The end-user's date of birth.
   */
  DateOfBirth?: string | undefined;
  /**
   * The national identification number.Format is yyyyMMddxxxx. Only applicable for Bankgiro(SE)
   * <p>
   * [Bankgiro]: To preset the nationalId to use for setting up the mandate. To make the end-user journey smooth, please use this parameter.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * Only applicable for Bankgiro(SE)
   * [Bankgiro]If the nationalId should be locked to the value of NationalIdentificationNumber, then set this to 1 or omit the parameter (you may set it to 0 as well).
   */
  UnchangeableNationalIdentificationNumber?: string | undefined;
  /**
   * If the payment plan is known in advance, this information is displayed when approving the mandate.
   */
  PaymentSchedule?: DirectDebitPaymentSchedule | undefined;
  /**
   * Recipient address street
   */
  AddressLine1?: string | undefined;
  /**
   * Additional address information of the recipient.
   */
  AddressLine2?: string | undefined;
  /**
   * The city of the recipient address.
   */
  AddressCity?: string | undefined;
  /**
   * The postalcode of the recipient address.
   */
  AddressPostalCode?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressCountry?: string | undefined;
  /**
   * The end-users localization preference in the format language[_territory]. Language is the ISO 639-1 code and territory the ISO 3166-1-alpha-2 code.
   */
  Locale?: string | undefined;
  Theme?: DirectDebitTheme | undefined;
  /**
   * When rendering the Trustly Checkout in a native app you are required to pass your application's url as an attribute to the order initiation request. By doing so, Trustly can redirect users back to your app after using external identification apps such as Mobile BankID: Please visit documentation site for more information. It must not be included for transactions that are not originating from an app.
   * <p>
   * NOTE! This value is only used for redirecting users back to the native app within the flows. See also SuccessURL and FailURL descriptions.
   */
  ReturnToAppURL?: string | undefined;
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement?: string | undefined;
}

export enum DirectDebitImportType {
  /**
   * Does NOT register the mandate with the scheme (<code>REGISTER</code> does)
   */
  CREATE = 'CREATE',
  /**
   * Registers the mandate with the scheme
   */
  REGISTER = 'REGISTER',
}

export interface ImportDirectDebitMandateRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  AccountID?: string | undefined;
  /**
   * This parameter in a way identifies the mandate you are to setup. If it's already used, you will receive an error, ERROR_MERCHANT_REFERENCE_ALREADY_EXISTS
   * which basically informs you that there's already a mandate with that reference.
   * <p>
   * [BACS]: The unique mandate reference. 6 - 10 characters consisting of A-Z and 0-9. Can not begin with DDIC and neither consists of the same characters, eg. AAAAAAA.
   * [Bankgiro]: The unique mandate reference. This must be numeric and unique for the payer, eg nationalId or similar can be used. Format needs to follow regexp [1-9][0-9]{5-15}
   * [SEPA-DD]: The unique mandate reference. This must be unique for the end-user for you as a merchant. Format needs to follow regexp [0-9,a-z,A-Z]{10-35}
   * @example 123ABC0123
   */
  MerchantReference: string;
  ImportType: DirectDebitImportType;
  /**
   * The country where the mandate is to be created.
   */
  Country: string;
  /**
   * The first name of the end user.
   * [BACS]: Only mandatory if manual entry should be enabled.
   * [Bankgiro]: Mandatory
   * [Sepa-DD]: Mandatory
   */
  Firstname?: string | undefined;
  /**
   * The last name of the end user.
   * [BACS]: Only mandatory if manual entry should be enabled.
   * [Bankgiro]: Mandatory
   * [Sepa-DD]: Mandatory
   */
  Lastname?: string | undefined;
  /**
   * The email address of the end user.
   * @example test@trustly.com
   */
  Email: string;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement?: string | undefined;
  /**
   * The national identification number.Format is yyyyMMddxxxx. Only applicable for Bankgiro(SE)
   * <p>
   * [Bankgiro]: To preset the nationalId to use for setting up the mandate. To make the end-user journey smooth, please use this parameter.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * [BACS]:If flat and building is available, then use that for this field. If there's no flat/building at all, then use the street and number. Note that without AddressLine1, manual entry will be disabled.
   * [Bankgiro]: Not mandatory
   * [SepaDD]: Mandatory
   */
  AddressLine1?: string | undefined;
  /**
   * [BACS]:If there are flat and building information, then use addressLine2 for the street and number. Note that without AddressLine1, manual entry will be disabled.
   * [Bankgiro]: Not mandatory
   * [SepaDD]: Optional and depends on the country if needed.
   */
  AddressLine2?: string | undefined;
  /**
   * The city of the recipient address.
   */
  AddressCity?: string | undefined;
  /**
   * The postalcode of the recipient address.
   */
  AddressPostalCode?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressCountry?: string | undefined;
}

export enum DirectDebitCollectionType {
  INITIAL = 'INITIAL',
  RECURRING = 'RECURRING',
  RE_SUBMITTED = 'RE_SUBMITTED',
  FINAL = 'FINAL',
}

export interface DirectDebitRequestDataAttributes extends AbstractRequestDataAttributes {
  CollectionType?: DirectDebitCollectionType | undefined;
  /**
   * Date string in the ISO 8601 format (YYYY-MM-DD)
   */
  PaymentDate?: string | undefined;
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement?: string | undefined;
}

export enum DirectDebitCancelReason {
  /**
   * The mandate is invalid for some reason.
   */
  ERROR_MANDATE_INVALID = 'ERROR_MANDATE_INVALID',
  /**
   * Ie. missing funds or being canceled by the end-user.
   */
  ERROR_CHARGE_NOT_APPROVED = 'ERROR_CHARGE_NOT_APPROVED',
  /**
   * If the payment was canceled from the api
   */
  CANCELLED = 'CANCELLED',
  /**
   * All other failures
   */
  FAILED = 'FAILED',
}

export enum DirectCreditRejected {
  /**
   * No matching active accountId
   */
  ERROR_MANDATE_NOT_FOUND = 'ERROR_MANDATE_NOT_FOUND',
  /**
   * Account not properly configured
   */
  ERROR_DIRECT_DEBIT_NOT_ALLOWED = 'ERROR_DIRECT_DEBIT_NOT_ALLOWED',
  /**
   * Payment date is invalid
   */
  ERROR_PAYMENT_DATE_FAILURE = 'ERROR_PAYMENT_DATE_FAILURE',
  /**
   * Amount is invalid or not within the configured range
   */
  ERROR_AMOUNT_FAILURE = 'ERROR_AMOUNT_FAILURE',
  /**
   * The mandate doesn't support the currency
   */
  ERROR_CURRENCY_FAILURE = 'ERROR_CURRENCY_FAILURE',
}

export enum DirectCreditDebitNotificationReason {
  /**
   * All other failures
   */
  FAILED = 'FAILED',
}

export enum DirectCreditCancelReason {
  /**
   * The specified account is not valid, eg sending funds to it is not possible.
   */
  INVALID_ACCOUNT = 'INVALID_ACCOUNT',
  /**
   * If the payment was cancelled via the api
   */
  CANCELLED = 'CANCELLED',
  /**
   * All other failures
   */
  FAILED = 'FAILED',
}

export interface DepositResponseData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   */
  orderid?: string | undefined;
  /**
   * The URL that should be loaded so that the end-user can complete the deposit.
   */
  url?: string | undefined;
}

export interface DepositRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
  /**
   * The ISO 3166-1-alpha-2 code of the end-user's country. This will be used for pre-selecting the country for the end-user in the iframe.
   * Note: This will only have an effect for new end-users. If an end-user has done a previous order (with the same EndUserID), the country that was last used will be pre-selected.
   */
  Country: string;
  /**
   * The end-users localization preference in the format language[_territory]. Language is the ISO 639-1 code and territory the ISO 3166-1-alpha-2 code.
   */
  Locale: string;
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement: string;
  /**
   * The email address of the end user.
   * @example test@trustly.com
   */
  Email: string;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The IP-address of the end-user.
   */
  IP?: string | undefined;
  /**
   * The URL to which the end-user should be redirected after a successful deposit.  Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  SuccessURL: string;
  /**
   * The URL to which the end-user should be redirected after a failed  deposit. Do not put any logic on that page since it's not guaranteed that the end-user will in fact visit it.
   */
  FailURL: string;
  /**
   * The TemplateURL should be used if you want to design your own payment page but have it hosted on Trustly's side. The URL of your template page should be provided in this attribute in every Deposit API call. Our system will then fetch the content of your template page, insert the Trustly iframe into it and host the entire page on Trustlyâ€™s side. In the response to the Deposit request, you will receive a URL to the hosted template page which you should redirect the user to (the hosted page cannot be put inside an iframe).
   */
  TemplateURL?: string | undefined;
  /**
   * The html target/frame-name of the SuccessURL. Only _top, _self and _parent are supported.
   */
  URLTarget?: UrlTarget | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * This attribute disables the possibility to change/type in national identification number when logging in to a Swedish bank. If this attribute is sent, the attribute NationalIdentificationNumber needs to be correctly included in the request.  Note: This is only available for Swedish banks.
   */
  UnchangeableNationalIdentificationNumber?: string | undefined;
  /**
   * If you are using Trustly from within your native iOS app, this attribute should be sent so that we can redirect the users back to your app in case an external app is used for authentication (for example Mobile Bank ID in Sweden).
   */
  URLScheme?: string | undefined;
  /**
   * When rendering the Trustly Checkout in a native app you are required to pass your application's url as an attribute to the order initiation request. By doing so, Trustly can redirect users back to your app after using external identification apps such as Mobile BankID: Please visit documentation site for more information. It must not be included for transactions that are not originating from an app.
   * <p>
   * NOTE! This value is only used for redirecting users back to the native app within the flows. See also SuccessURL and FailURL descriptions.
   */
  ReturnToAppURL?: string | undefined;
  /**
   * iDeal. The iDEAL integration offered by Trustly allows for both iDEAL and Trustly payments on a single integration with all transactions visible in the same AccountLedger. To initiate a new iDEAL payment, add Method = "deposit.bank.netherlands.ideal" to the Deposit attributes.
   */
  Method?: string | undefined;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
  /**
   * The amount to deposit with exactly two decimals in the currency specified by Currency. Do not use this attribute in combination with<code>suggestedMinAmount</code> and <code>suggestedMaxAmount</code>. Only digits. Use dot (.) as decimal separator.
   */
  Amount?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the shipping address country.
   */
  ShippingAddressCountry?: string | undefined;
  /**
   * The postal code of the shipping address.
   */
  ShippingAddressPostalCode?: string | undefined;
  /**
   * The city of the shipping address.
   */
  ShippingAddressCity?: string | undefined;
  /**
   * Shipping address street
   */
  ShippingAddressLine1?: string | undefined;
  /**
   * Additional shipping address information.
   */
  ShippingAddressLine2?: string | undefined;
  /**
   * The entire shipping address. This attribute should only be used if you are unable to provide the shipping address information in the 5 separate attributes: <code>ShippingAddressCountry</code>, <code>ShippingAddressCity</code>, <code>ShippingAddressPostalCode</code>, <code>ShippingAddressLine</code>, <code>ShippingAddressLine</code>
   */
  ShippingAddress?: string | undefined;
  /**
   * In addition to the deposit, request a direct debit mandate from the account used for the deposit. 1 enables, 0 disables. The default is disabled. If this attribute is set, additional account notifications might be sent. You can read more about Trustly Direct Debit here,  under section 2.1
   */
  RequestDirectDebitMandate?: StringBoolean | undefined;
  /**
   * The AccountID received from an account notification which shall be charged in a Trustly Direct Debit deposit. This attribute should only be sent in combination with {"QuickDeposit" : 1}
   */
  ChargeAccountId?: string | undefined;
  /**
   * Set to 1 for Trustly Direct Debit deposits. QuickDeposit should be  set set to 1 when the end user attempts a quick deposit, even if  ChargeAccountID is not set. You can read more about QuickDeposits  here, under section 1.1 and 1.2.
   */
  QuickDeposit?: StringBoolean | undefined;
  /**
   * The ExternalReference is a reference set by the merchant for any purpose and does not need to be unique for every API call. For example, it can be used for invoice references, OCR numbers and also for offering end users the option to part-pay an invoice using the same ExternalReference. The ExternalReference will be included in version 1.2 of the settlement report, <code>ViewAutomaticSettlementDetailsCSV</code>.
   */
  ExternalReference?: string | undefined;
  /**
   * Human-readable identifier of the consumer-facing merchant (e.g. legal name or trade name)
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchant?: string | undefined;
  /**
   * URL of the consumer-facing website where the order is initiated
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchantURL?: string | undefined;
  /**
   * VISA category codes describing the merchant's nature of business.
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express account. It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  MerchantCategoryCode?: string | undefined;
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  AccountId?: string | undefined;
  /**
   * Information about the Payee (ultimate creditor). The burden of identifying who the Payee for any given transaction is lies with the Trustly customer. Required for some merchants and partners. RecipientInformation is mandatory to send for money transfer services (including remittance houses), e-wallets, prepaid cards, as well as for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account (other cases may also apply).
   */
  RecipientInformation?: RecipientInformation | undefined;
  /**
   * Trustly will send a KYC notification to the merchantâ€™s <code>NotificationURL</code> if the attribute "RequestKYC" : "1" is sent in a Deposit API call. The KYC notification should be expected after the end user has performed a successful login to their bank, and always before a deposit transfer is initiated.
   */
  RequestKYC?: StringBoolean | undefined;
  /**
   * The minimum amount the end-user is allowed to deposit in the currency specified by Currency.Only digits. Use dot (.) as decimal separator.
   */
  SuggestedMinAmount?: string | undefined;
  /**
   * The maximum amount the end-user is allowed to deposit in the currency specified by Currency. Only digits. Use dot (.) as decimal separator.
   */
  SuggestedMaxAmount?: string | undefined;
}

export interface DenyWithdrawalResponseData {
  /**
   * The OrderID specified when calling the method.
   */
  orderid: number;
  /**
   * '1' if the refund request is accepted by Trustly's system. If the  refund request is not accepted, you will get an error code back in the <code>JsonRpcResponse</code> -&gt; <code>error</code>
   */
  result: StringBoolean;
}

export interface DebitRefundDirectDebitNotificationDataAttributes extends AbstractRequestDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Statement that appear on the end users bank account
   */
  statement?: string | undefined;
}

export enum DebitNotificationResponseDataStatus {
  OK = 'OK',
  FAILED = 'FAILED',
}

export enum DebitDirectDebitNotificationReason {
  /**
   * The mandate is invalid for some reason.
   */
  ERROR_MANDATE_INVALID = 'ERROR_MANDATE_INVALID',
  /**
   * Ie. missing funds or being canceled by the end-user.
   */
  ERROR_CHARGE_NOT_APPROVED = 'ERROR_CHARGE_NOT_APPROVED',
  /**
   * If the payment was canceled from the api
   */
  CANCELLED = 'CANCELLED',
  /**
   * All other failures
   */
  FAILED = 'FAILED',
}

export interface DebitDirectDebitNotificationDataAttributes extends AbstractRequestDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Statement that appear on the end users bank account
   */
  statement?: string | undefined;
  reason?: DebitDirectDebitNotificationReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
}

export interface DebitDirectCreditNotificationDataAttributes extends AbstractRequestDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Statement that appear on the end users bank account
   */
  statement?: string | undefined;
  reason?: DirectCreditDebitNotificationReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
}

export interface CreditSwishNotificationDataAttributes extends AbstractCreditNotificationDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  payerAlias?: string | undefined;
}

export enum CreditRefundDirectDebitCancelReason {
  /**
   * The request was declined
   */
  DECLINED = 'DECLINED',
  /**
   * The request was cancelled
   */
  CANCELED = 'CANCELED',
  /**
   * There was an error during the request
   */
  ERROR = 'ERROR',
  /**
   * Direct Debit Mandate: Either when the consumer cancels in the journey or if you call cancel mandate method, or the payment was canceled from the api.
   */
  CANCELLED = 'CANCELLED',
  /**
   * Direct Debit Mandate: If the underlying scheme reports failure or cancellation of the mandate
   */
  FAILED = 'FAILED',
  /**
   * Direct Debit Mandate: If the mandate already exist
   */
  MANDATE_ALREADY_EXISTS = 'MANDATE_ALREADY_EXISTS',
  /**
   * Direct Debit Mandate: If the provided accountId was incorrect
   */
  INVALID_ACCOUNT_ID = 'INVALID_ACCOUNT_ID',
  /**
   * The mandate is invalid for some reason.
   */
  ERROR_MANDATE_INVALID = 'ERROR_MANDATE_INVALID',
  /**
   * Ie. missing funds or being canceled by the end-user.
   */
  ERROR_CHARGE_NOT_APPROVED = 'ERROR_CHARGE_NOT_APPROVED',
  /**
   * The specified account is not valid, eg sending funds to it is not possible.
   */
  INVALID_ACCOUNT = 'INVALID_ACCOUNT',
}

export interface CreditRefundDirectDebitNotificationDataAttributes extends AbstractCreditNotificationDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Statement that appear on the end users bank account
   */
  statement?: string | undefined;
  reason?: CreditRefundDirectDebitCancelReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
}

export interface CreditDirectDebitNotificationDataAttributes extends AbstractCreditNotificationDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Statement that appear on the end users bank account
   */
  statement?: string | undefined;
}

export interface CreditDirectCreditNotificationDataAttributes extends AbstractCreditNotificationDataAttributes {
  /**
   * Payment reference, from the bank, of the payment that occurred based on the Payment request. Only available if status is PAID.
   */
  reference?: string | undefined;
  /**
   * Statement that appear on the end users bank account
   */
  statement?: string | undefined;
}

export interface CreateAccountResponseData {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  accountId?: number | undefined;
  /**
   * The clearing house of the end-user's bank account. Typically the name of a country in uppercase letters. See examples or table at https://developers.trustly.com/emea/docs/registeraccount.
   */
  clearingHouse?: string | undefined;
  /**
   * The bank for this account
   */
  bank?: string | undefined;
  /**
   * A text that is safe to show the enduser for identifying the account. Do not parse this text since it will be a different format for different accounts.
   */
  descriptor?: string | undefined;
}

export interface CreateAccountRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The end-user's date of birth.
   */
  DateOfBirth?: string | undefined;
  /**
   * The mobile phone number to the end-user in international format. This is used for KYC and AML routines.
   */
  MobilePhone?: string | undefined;
  /**
   * The end-user's social security number / personal number / birth number / etc.  Useful for some banks for identifying transactions and KYC/AML. If a Swedish personid ("personnummer") is provided, it will be pre-filled when the user logs in to their bank.
   */
  NationalIdentificationNumber?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the recipient address country.
   */
  AddressCountry?: string | undefined;
  /**
   * The postalcode of the recipient address.
   */
  AddressPostalCode?: string | undefined;
  /**
   * The city of the recipient address.
   */
  AddressCity?: string | undefined;
  /**
   * Recipient address street
   */
  AddressLine1?: string | undefined;
  /**
   * Additional address information of the recipient.
   */
  AddressLine2?: string | undefined;
  /**
   * The entire shipping address.
   * This attribute should only be used if you are unable to provide the shipping address information in the 5 separate properties: <code>AddressCountry, </code>AddressCity<code>, </code>AddressPostalCode<code>, </code>AddressLine1, <code>AddressLine2</code>
   */
  Address?: string | undefined;
  /**
   * The email address of the end user.
   */
  Email?: string | undefined;
}

export interface ChargeRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement: string;
  /**
   * The email address of the end user.
   * @example test@trustly.com
   */
  Email: string;
  /**
   * The date when the funds will be charged from the end user's bank account. If this attribute is not sent, the charge will be attempted as soon as possible.
   */
  PaymentDate?: string | undefined;
  /**
   * The ExternalReference is a reference set by the merchant for any purpose and does not need to be unique for every API call. For example, it can be used for invoice references, OCR numbers and also for offering end users the option to part-pay an invoice using the same ExternalReference. The ExternalReference will be included in version 1.2 of the settlement report, <code>ViewAutomaticSettlementDetailsCSV</code>.
   */
  ExternalReference?: string | undefined;
  /**
   * Human-readable identifier of the consumer-facing merchant (e.g. legal name or trade name)
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchant?: string | undefined;
  /**
   * URL of the consumer-facing website where the order is initiated
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchantURL?: string | undefined;
  /**
   * VISA category codes describing the merchant's nature of business.
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express account. It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  MerchantCategoryCode?: string | undefined;
}

export interface CancelSwishNotificationDataAttributes extends AbstractRequestDataAttributes {
  reason?: SwishCancelReason | undefined;
  /**
   * Description of reason
   */
  details?: string | undefined;
}

export interface CancelRefundDirectDebitNotificationDataAttributes extends AbstractRequestDataAttributes {
  reason?: RefundDirectDebitCancelReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
}

export enum CancelMandateNotificationDataAttributesCancelReason {
  /**
   * The mandate already exists
   */
  MANDATE_ALREADY_EXISTS = 'MANDATE_ALREADY_EXISTS',
  /**
   * Either when the consumer cancels in the journey or if you call cancel mandate method.
   */
  CANCELLED = 'CANCELLED',
  /**
   * If the underlying scheme reports failure or cancellation of the mandate
   */
  FAILED = 'FAILED',
  /**
   * If the provided accountId was incorrect
   */
  INVALID_ACCOUNT_ID = 'INVALID_ACCOUNT_ID',
}

export interface CancelMandateNotificationDataAttributes extends AbstractRequestDataAttributes {
  reason?: CancelMandateNotificationDataAttributesCancelReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  accountid?: string | undefined;
  /**
   * This parameter in a way identifies the mandate you are to setup. If it's already used, you will receive an error, ERROR_MERCHANT_REFERENCE_ALREADY_EXISTS
   * which basically informs you that there's already a mandate with that reference.
   * <p>
   * [BACS]: The unique mandate reference. 6 - 10 characters consisting of A-Z and 0-9. Can not begin with DDIC and neither consists of the same characters, eg. AAAAAAA.
   * [Bankgiro]: The unique mandate reference. This must be numeric and unique for the payer, eg nationalId or similar can be used. Format needs to follow regexp [1-9][0-9]{5-15}
   * [SEPA-DD]: The unique mandate reference. This must be unique for the end-user for you as a merchant. Format needs to follow regexp [0-9,a-z,A-Z]{10-35}
   */
  merchantreference?: string | undefined;
}

/**
 * If the cancel was NOT accepted, a textual code describing the rejection reason, null otherwise.
 */
export enum CancelDirectDebitReject {
  /**
   * the OrderId does not exist.
   */
  ERROR_CHARGE_NOT_FOUND = 'ERROR_CHARGE_NOT_FOUND',
  /**
   * the charge has already been processed in the scheme (e.g. BACS) and can not be cancelled.
   */
  ERROR_CHARGE_ALREADY_PROCESSED = 'ERROR_CHARGE_ALREADY_PROCESSED',
}

export interface CancelDirectDebitNotificationDataAttributes extends AbstractRequestDataAttributes {
  reason?: DirectDebitCancelReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
}

/**
 * If the cancel was NOT accepted, a textual code describing the rejection reason, null otherwise.
 */
export enum CancelDirectDebitMandateReject {
  /**
   * The mandate does not exist.
   */
  ERROR_MANDATE_NOT_FOUND = 'ERROR_MANDATE_NOT_FOUND',
}

export interface CancelDirectCreditNotificationDataAttributes extends AbstractRequestDataAttributes {
  reason?: DirectCreditCancelReason | undefined;
  /**
   * Description of reason. If Direct Debit Mandate, then  this applies when reason is <code>FAILED: BACS ADDACS_1(INSTRUCTION CANCELLED BY PAYER)</code>. See https://eu.developers.trustly.com/doc/reference/mdd#description-of-details-eg-failure-details
   */
  details?: string | undefined;
}

export interface BalanceResponseDataEntry {
  /**
   * The currency
   */
  currency?: string | undefined;
  /**
   * The balance with 2 decimals
   */
  balance?: string | undefined;
}

export interface ApproveWithdrawalResponseData {
  /**
   * The OrderID specified when calling the method.
   */
  orderid: number;
  /**
   * 1 if the withdrawal could be approved and 0 otherwise.
   */
  result: StringBoolean;
}

export enum AckDataStatus {
  OK = 'OK',
}

export interface AccountPayoutResponseData {
  /**
   * The globally unique OrderID the account payout order was assigned in our system.
   */
  orderid: number;
  /**
   * "1" if the payout could be accepted and "0" otherwise.
   */
  result: StringBoolean;
}

export interface AccountPayoutRequestDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The text to show on the end-user's bank statement after Trustly's own 10 digit reference (which always will be displayed first). The reference must let the end user identify the merchant based on this value. So the ShopperStatement should contain either your brand name, website name, or company name.
   * <p>
   * If possible, try to keep this text as short as possible to maximise the chance that the full reference will fit into the reference field on the customer's bank since some banks allow only a limited number of characters. If the full ShopperStatement does not fit into the reference it will be truncated from the end.
   */
  ShopperStatement: string;
  /**
   * The ExternalReference is a reference set by the merchant for any purpose and does not need to be unique for every API call. For example, it can be used for invoice references, OCR numbers and also for offering end users the option to part-pay an invoice using the same ExternalReference. The ExternalReference will be included in version 1.2 of the settlement report, <code>ViewAutomaticSettlementDetailsCSV</code>.
   */
  ExternalReference?: string | undefined;
  /**
   * Human-readable identifier of the consumer-facing merchant (e.g. legal name or trade name)
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchant?: string | undefined;
  /**
   * URL of the consumer-facing website where the order is initiated
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  PSPMerchantURL?: string | undefined;
  /**
   * VISA category codes describing the merchant's nature of business.
   * Note: Mandatory attribute for Trustly Partners that are using Express Merchant Onboarding (EMO) and aggregate traffic under a master processing account.  It is also mandatory for E-wallets used directly in a merchant's checkout.
   * Mandatory attributes for Trustly Partners that are using Express account. It is also mandatory for E-wallets used directly in a merchant's checkout, whereby the purpose of a Trustly transaction is to pay for goods/services by placing funds on the payer's e-money account ("funding stage") following an immediate transfer into the e-money account of the payee ( "payment" stage).
   */
  MerchantCategoryCode?: string | undefined;
  /**
   * Information about the Payer (ultimate debtor). This is required for some merchants and partners. SenderInformation is mandatory to send in Attributes{} for money transfer services (including remittance houses), e-wallets, prepaid cards, as well as for Trustly Partners that are using Express Merchant Onboarding and aggregate traffic under a master processing account (other cases may also apply).
   */
  SenderInformation?: SenderInformation | undefined;
}

export interface AccountMandateNotificationDataAttributes extends AbstractAccountNotificationDataAttributes {
  /**
   * Whether the direct debit mandate is active or not, 1 for active, 0 for non-active.
   */
  directdebitmandate?: NumberBoolean | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the end-user's country. This will be used for pre-selecting the country for the end-user in the iframe.
   * Note: This will only have an effect for new end-users. If an end-user has done a previous order (with the same EndUserID), the country that was last used will be pre-selected.
   */
  country?: string | undefined;
  /**
   * The bank number identifying the end-user's bank in the given clearing house. For bank accounts in IBAN format you should just provide an empty string (""). For non-IBAN format, see examples. The BankNumber for Swedish bank accounts should be the local "clearing number", and the AccountNumber parameter should contain the rest of the account number. Most Swedish banks have a 4-digit clearing number, but a 5-digit clearing number is used for Swedbank accounts when the clearing number starts with "8". Nordea accounts where the account number is the same as the person's national identification number always has "3300" as the clearing number.
   * <p>
   * IBAN for Swedish bank accounts is supported upon request. When making API calls with Swedish IBAN, ensure to include the Clearinghouse attribute as "IBAN" instead of "SWEDEN". See more at https://developers.trustly.com/emea/docs/registeraccount
   */
  bankcode?: string | undefined;
  /**
   * Name of the account
   */
  accountname?: string | undefined;
  accountholders?: Array<string> | undefined;
  /**
   * The branch identifier
   */
  bankidentifier?: string | undefined;
  /**
   * The account number, identifying the end-user's account in the bank. Can be either IBAN or country-specific format, see examples or read more at https://developers.trustly.com/emea/docs/registeraccount
   */
  accountnumber?: string | undefined;
  accountsource?: MandateAccountSource | undefined;
}

export interface AccountLedgerResponseDataEntry {
  /**
   * Your userid in our system.
   */
  userid?: string | undefined;
  /**
   * The datestamp for when this ledger row affected your balance in our system.
   */
  datestamp?: string | undefined;
  /**
   * The globally unique OrderID that resulted in this ledger record.
   */
  orderid?: number | undefined;
  /**
   * The name of the bookkeeping account this ledger record belongs to.
   */
  accountname?: string | undefined;
  /**
   * Your unique MessageID that you used to create the order that resulted in this ledger record.
   */
  messageid?: string | undefined;
  /**
   * A human friendly description of this ledger record.
   */
  transactiontype?: string | undefined;
  /**
   * The currency of the amount in this ledger record.
   */
  currency?: string | undefined;
  /**
   * The amount your balance in our system was affected with due to this ledger record. May contain a lot of decimals.
   */
  amount?: string | undefined;
  /**
   * An ID meaning different things for different payment methods, you probably don't need this data.
   */
  gluepayid?: string | undefined;
}

export interface AbstractRequestDataAttributes {
  [key: string]: unknown;
}

export interface AbstractRequestData<T extends AbstractRequestDataAttributes> {
  Username: string;
  Password: string;
  Attributes?: T | undefined;
}

export interface AbstractPendingNotificationData extends AbstractNotificationRequestData {
  /**
   * @example 98.02
   */
  amount: number;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  currency: string;
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   * @example 2014-01-30 13:28:45.652299+01
   * @example 2014-03-31 11:50:06.46106+00
   */
  timestamp: string;
  attributes?: AnyAttributes | undefined;
}

export interface AbstractNotificationRequestData {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  messageid: string;
  /**
   * Unique ID for this notification. Each notification must only be handled once in your system.
   */
  notificationid: string;
}

export interface AbstractNotificationRequest {
  method?: string | undefined;
}

export interface AbstractKYCNotificationData extends AbstractNotificationRequestData {
  /**
   * Trustly generated unique identifier based on playerâ€™s bank account profile*.
   * Can be used as an identifier when <code>personid</code> is not available.
   * <p>
   * ***The identifier may change, hence our suggestion is to have a logic that does not include <code>KYCEntityID</code>
   * @example 29a750aa-0bad-4a28-a42d-ffb9a690d93a
   */
  kycentityid: string;
  attributes?: KYCNotificationDataAttributes | undefined;
}

export interface AbstractDebitNotificationData<T extends AbstractRequestDataAttributes> extends AbstractNotificationRequestData {
  /**
   * @example BGN: 100.00
   * @example CZK: 100.00
   * @example DKK: 100.00
   * @example EUR: 100.00
   * @example GBP: 100.00
   * @example HRK: 100.00
   * @example HUF: 100
   * @example NOK: 100.00
   * @example PLN: 100.00
   * @example RON: 100.00
   * @example SEK: 100.00
   */
  amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  currency: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid: string;
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   * @example 2014-01-30 13:28:45.652299+01
   * @example 2014-03-31 11:50:06.46106+00
   */
  timestamp: string;
  attributes?: T | undefined;
  [key: string]: unknown;
}

export interface AbstractCreditNotificationData<T extends AbstractRequestDataAttributes> extends AbstractNotificationRequestData {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid?: string | undefined;
  amount?: number | undefined;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   */
  currency?: string | undefined;
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   */
  timestamp?: string | undefined;
  attributes?: T | undefined;
}

export interface AbstractCancelNotificationData<T extends AbstractRequestDataAttributes> extends AbstractNotificationRequestData {
  attributes?: T | undefined;
}

export interface AbstractAccountNotificationDataAttributes extends AbstractRequestDataAttributes {
  /**
   * The clearing house of the end-user's bank account. Typically the name of a country in uppercase letters. See examples or table at https://developers.trustly.com/emea/docs/registeraccount.
   */
  clearinghouse?: string | undefined;
  /**
   * The bank for this account
   */
  bank?: string | undefined;
  /**
   * A text that is safe to show the enduser for identifying the account. Do not parse this text since it will be a different format for different accounts.
   */
  descriptor?: string | undefined;
  /**
   * The last digits of the bank account number.This can be used for matching against received KYC data from your manual routines.
   */
  lastdigits?: string | undefined;
  /**
   * An ID that uniquely identifies the account holder. Only present in markets where SSN is applicable. Note: The format of this field will for some countries look different than the example.
   */
  personid?: string | undefined;
  /**
   * The name of the account holder
   */
  name?: string | undefined;
  /**
   * The address of the account holder
   */
  address?: string | undefined;
  /**
   * The zipcode of the account holder
   */
  zipcode?: string | undefined;
  /**
   * The city of the account holder
   */
  city?: string | undefined;
}

export interface AbstractAccountNotificationData<T extends AbstractRequestDataAttributes> extends AbstractNotificationRequestData {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   * @example 1234567890
   * @example 7653385737
   */
  accountid: string;
  /**
   * Whether the account is verified or not. 0 for not verified, 1 for verified.
   */
  verified: StringBoolean;
  attributes?: T | undefined;
}

export type PendingNotificationData = PendingDefaultNotificationData | PendingDirectDebitNotificationData | PendingDirectCreditNotificationData | PendingRefundDirectDebitNotificationData | PendingDirectPaymentBatchNotificationData;
export type AccountNotificationData = AccountDefaultNotificationData | AccountMandateNotificationData;
export type KYCNotificationData = KYCDefaultNotificationData | KYCAbortNotificationData;
export type RecipientInformation = RecipientOrSenderInformation;
export type SenderInformation = RecipientOrSenderInformation;
export type CreditDefaultNotificationDataAttributes = AbstractCreditNotificationDataAttributes;
export type AccountDefaultNotificationDataAttributes = AbstractAccountNotificationDataAttributes;
export type AbstractCreditNotificationDataAttributes = AbstractRequestDataAttributes;
export type AnyAttributes = AbstractRequestDataAttributes;
export type KYCDefaultNotificationData = AbstractKYCNotificationData;
export type PendingDirectPaymentBatchNotificationData = AbstractPendingNotificationData;
export type DebitDirectDebitNotificationData = AbstractDebitNotificationData<DebitDirectDebitNotificationDataAttributes>;
export type DebitDirectCreditNotificationData = AbstractDebitNotificationData<DebitDirectCreditNotificationDataAttributes>;
export type DebitDefaultNotificationData = AbstractDebitNotificationData<AnyAttributes>;

export interface DebitRefundDirectDebitNotificationData extends AbstractDebitNotificationData<DebitRefundDirectDebitNotificationDataAttributes> {
  /**
   * Flag indicating that this is for Direct Debit refund. Note that this flag is not sent unless it's for a refund. Only value will be 1.
   */
  refund?: '1' | undefined;
}

export type DebitNotificationData = DebitDefaultNotificationData | DebitDirectDebitNotificationData | DebitDirectCreditNotificationData | DebitRefundDirectDebitNotificationData;
export type DebitNotificationResponseData = NotificationResponseDataBase<DebitNotificationResponseDataStatus>;

export interface KYCNotificationResponseData extends NotificationResponseDataBase<KYCNotificationResponseDataStatus> {
  limit?: string | undefined;
}

export interface AckData extends NotificationResponseDataBase<AckDataStatus> {
  [key: string]: unknown;
}

export type CreditDirectCreditNotificationData = AbstractCreditNotificationData<CreditDirectCreditNotificationDataAttributes>;
export type CreditSwishNotificationData = AbstractCreditNotificationData<CreditSwishNotificationDataAttributes>;
export type CreditDefaultNotificationData = AbstractCreditNotificationData<CreditDefaultNotificationDataAttributes>;

export interface CreditRefundDirectDebitNotificationData extends AbstractCreditNotificationData<CreditRefundDirectDebitNotificationDataAttributes> {
  /**
   * Flag indicating that this is for Direct Debit refund. Note that this flag is not sent unless it's for a refund. Only value will be 1.
   */
  refund?: '1' | undefined;
}

export interface CreditDirectDebitNotificationData extends AbstractCreditNotificationData<CreditDirectDebitNotificationDataAttributes> {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   */
  accountid?: string | undefined;
}

export type CreditNotificationData = CreditDefaultNotificationData | CreditDirectDebitNotificationData | CreditDirectCreditNotificationData | CreditRefundDirectDebitNotificationData | CreditSwishNotificationData;
export type CancelDirectDebitNotificationData = AbstractCancelNotificationData<CancelDirectDebitNotificationDataAttributes>;
export type CancelDirectCreditNotificationData = AbstractCancelNotificationData<CancelDirectCreditNotificationDataAttributes>;
export type CancelMandateNotificationData = AbstractCancelNotificationData<CancelMandateNotificationDataAttributes>;
export type CancelDirectPaymentBatchNotificationData = AbstractCancelNotificationData<AnyAttributes>;

export interface CancelSwishNotificationData extends AbstractCancelNotificationData<CancelSwishNotificationDataAttributes> {
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   */
  timestamp?: string | undefined;
}

export interface CancelRefundDirectDebitNotificationData extends AbstractCancelNotificationData<CancelRefundDirectDebitNotificationDataAttributes> {
  /**
   * Flag indicating that this is for Direct Debit refund. Note that this flag is not sent unless it's for a refund. Only value will be 1.
   */
  refund?: '1' | undefined;
}

export interface CancelDefaultNotificationData extends AbstractCancelNotificationData<AnyAttributes> {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  enduserid?: string | undefined;
  /**
   * The time of the transaction and the GMT offset (+01 means GMT + 1 hours).
   */
  timestamp?: string | undefined;
}

export type CancelNotificationData = CancelDefaultNotificationData | CancelSwishNotificationData | CancelDirectDebitNotificationData | CancelDirectCreditNotificationData | CancelRefundDirectDebitNotificationData | CancelMandateNotificationData | CancelDirectPaymentBatchNotificationData;
export type AccountMandateNotificationData = AbstractAccountNotificationData<AccountMandateNotificationDataAttributes>;
export type AccountDefaultNotificationData = AbstractAccountNotificationData<AccountDefaultNotificationDataAttributes>;
export type CancelDirectDebitMandateResponseData = WithRejection<StringBoolean, CancelDirectDebitMandateReject>;
export type ImportDirectDebitMandateResponseData = WithRejection<StringBoolean, ImportDirectDebitReject>;
export type CancelDirectDebitResponseData = WithRejection<StringBoolean, CancelDirectDebitReject>;
export type RefundDirectDebitResponseData = WithRejection<StringBoolean, RefundDirectDebitRejected>;

export interface DirectPaymentBatchResponseData extends WithRejection<StringBoolean, DirectPaymentBatchRejected> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
}

export interface DirectDebitResponseData extends WithRejection<StringBoolean, DirectDebitRejected> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
  [key: string]: unknown;
}

export interface DirectCreditResponseData extends WithRejection<StringBoolean, DirectCreditRejected> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
}

export interface ChargeResponseData extends WithRejection<StringBoolean, string> {
  orderid?: string | undefined;
}

export interface CancelChargeResponseData extends WithRejection<StringBoolean, string> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  orderid: string;
}

export type BalanceRequestData = AbstractRequestData<AnyAttributes>;

export interface WithdrawRequestData extends AbstractRequestData<WithdrawRequestDataAttributes> {
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
}

export interface SwishRequestData extends AbstractRequestData<SwishRequestDataAttributes> {
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   */
  NotificationURL?: string | undefined;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID?: string | undefined;
  /**
   * Your unique ID of the transaction.
   */
  MessageID?: string | undefined;
}

export interface SettlementReportRequestData extends AbstractRequestData<SettlementReportRequestDataAttributes> {
  /**
   * If the value is specified (i.e. not "null"), the system will only search for a settlement executed in that particular currency. If unspecified, settlements executed in any currency are included in the report.
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
  /**
   * The date when the settlement was processed.
   */
  SettlementDate: string;
}

export interface SelectAccountRequestData extends AbstractRequestData<SelectAccountRequestDataAttributes> {
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
}

export interface RegisterAccountRequestData extends AbstractRequestData<RegisterAccountRequestDataAttributes> {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID?: string | undefined;
  /**
   * The clearing house of the end-user's bank account. Typically the name of a country in uppercase letters. See examples or table at https://developers.trustly.com/emea/docs/registeraccount.
   * @example AUSTRIA
   * @example BELGIUM
   * @example BULGARIA
   * @example CROATIA
   * @example CYPRUS
   * @example CZECH_REPUBLIC
   * @example DENMARK
   * @example ESTONIA
   * @example FINLAND
   * @example FRANCE
   * @example GERMANY
   * @example GREECE
   * @example HUNGARY
   * @example IRELAND
   * @example ITALY
   * @example LATVIA
   * @example LITHUANIA
   * @example LUXEMBOURG
   * @example MALTA
   * @example NETHERLANDS
   * @example NORWAY
   * @example POLAND
   * @example PORTUGAL
   * @example ROMANIA
   * @example SLOVAKIA
   * @example SLOVENIA
   * @example SPAIN
   * @example SWEDEN
   * @example UNITED_KINGDOM
   */
  ClearingHouse: string;
  /**
   * The bank number identifying the end-user's bank in the given clearing house. For bank accounts in IBAN format you should just provide an empty string (""). For non-IBAN format, see examples. The BankNumber for Swedish bank accounts should be the local "clearing number", and the AccountNumber parameter should contain the rest of the account number. Most Swedish banks have a 4-digit clearing number, but a 5-digit clearing number is used for Swedbank accounts when the clearing number starts with "8". Nordea accounts where the account number is the same as the person's national identification number always has "3300" as the clearing number.
   * <p>
   * IBAN for Swedish bank accounts is supported upon request. When making API calls with Swedish IBAN, ensure to include the Clearinghouse attribute as "IBAN" instead of "SWEDEN". See more at https://developers.trustly.com/emea/docs/registeraccount
   * @example Sweden: ^[0-9]{4,5}$
   * @example United Kingdom: ^[0-9]{6}$
   */
  BankNumber: string;
  /**
   * The account number, identifying the end-user's account in the bank. Can be either IBAN or country-specific format, see examples or read more at https://developers.trustly.com/emea/docs/registeraccount
   * @example 6112
   * @example 391124057
   * @example AUSTRIA: ^AT[0-9]{18}$
   * @example BELGIUM: ^BE[0-9]{14}$
   * @example BULGARIA: ^BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}$
   * @example CROATIA: ^HR[0-9]{2}[0-9]{7}[0-9]{10}$
   * @example CYPRUS: ^CY[0-9]{10}[0-9A-Z]{16}$
   * @example CZECH_REPUBLIC: ^CZ[0-9]{22}$
   * @example DENMARK: ^DK[0-9]{16}$
   * @example ESTONIA: ^EE[0-9]{18}$
   * @example FINLAND: ^FI[0-9]{16}$
   * @example FRANCE: ^FR[0-9]{12}[0-9A-Z]{11}[0-9]{2}$
   * @example GERMANY: ^DE[0-9]{20}$
   * @example GREECE: ^GR[0-9]{25}$
   * @example HUNGARY: ^HU[0-9]{26}$
   * @example IRELAND: ^IE[0-9]{2}[A-Z]{4}[0-9]{14}$
   * @example ITALY: ^IT[0-9]{2}[A-Z][0-9]{10}[0-9A-Z]{12}$
   * @example LATVIA: ^LV[0-9]{2}[A-Z]{4}[0-9A-Z]{13}$
   * @example LITHUANIA: ^LT[0-9]{18}$
   * @example LUXEMBOURG: ^LU[0-9]{18}$
   * @example MALTA: ^MT[0-9]{2}[A-Z]{4}[0-9]{5}[0-9A-Z]{18}$
   * @example NETHERLANDS: ^NL[0-9]{2}[A-Z]{4}[0-9]{10}$
   * @example NORWAY: ^NO[0-9]{13}$
   * @example POLAND: ^PL[0-9]{26}$
   * @example PORTUGAL: ^PT[0-9]{23}$
   * @example ROMANIA: ^RO[0-9]{2}[A-Z]{4}[0-9A-Z]{16}$
   * @example SLOVAKIA: ^SK[0-9]{22}$
   * @example SLOVENIA: ^SI56[0-9]{15}$
   * @example SPAIN: ^ES[0-9]{22}$
   * @example SWEDEN:* [0-9]{1,15}$
   * @example UNITED_KINGDOM: ^[0-9]{8}$
   */
  AccountNumber: string;
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
}

export interface RegisterAccountPayoutRequestData extends AbstractRequestData<RegisterAccountPayoutRequestDataAttributes> {
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * The clearing house of the end-user's bank account. Typically the name of a country in uppercase letters. See examples or table at https://developers.trustly.com/emea/docs/registeraccount.
   * @example AUSTRIA
   * @example BELGIUM
   * @example BULGARIA
   * @example CROATIA
   * @example CYPRUS
   * @example CZECH_REPUBLIC
   * @example DENMARK
   * @example ESTONIA
   * @example FINLAND
   * @example FRANCE
   * @example GERMANY
   * @example GREECE
   * @example HUNGARY
   * @example IRELAND
   * @example ITALY
   * @example LATVIA
   * @example LITHUANIA
   * @example LUXEMBOURG
   * @example MALTA
   * @example NETHERLANDS
   * @example NORWAY
   * @example POLAND
   * @example PORTUGAL
   * @example ROMANIA
   * @example SLOVAKIA
   * @example SLOVENIA
   * @example SPAIN
   * @example SWEDEN
   * @example UNITED_KINGDOM
   */
  ClearingHouse: string;
  /**
   * The bank number identifying the end-user's bank in the given clearing house. For bank accounts in IBAN format you should just provide an empty string (""). For non-IBAN format, see examples. The BankNumber for Swedish bank accounts should be the local "clearing number", and the AccountNumber parameter should contain the rest of the account number. Most Swedish banks have a 4-digit clearing number, but a 5-digit clearing number is used for Swedbank accounts when the clearing number starts with "8". Nordea accounts where the account number is the same as the person's national identification number always has "3300" as the clearing number.
   * <p>
   * IBAN for Swedish bank accounts is supported upon request. When making API calls with Swedish IBAN, ensure to include the Clearinghouse attribute as "IBAN" instead of "SWEDEN". See more at https://developers.trustly.com/emea/docs/registeraccount
   * @example Sweden: ^[0-9]{4,5}$
   * @example United Kingdom: ^[0-9]{6}$
   */
  BankNumber: string;
  /**
   * The account number, identifying the end-user's account in the bank. Can be either IBAN or country-specific format, see examples or read more at https://developers.trustly.com/emea/docs/registeraccount
   * @example 6112
   * @example 391124057
   * @example AUSTRIA: ^AT[0-9]{18}$
   * @example BELGIUM: ^BE[0-9]{14}$
   * @example BULGARIA: ^BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}$
   * @example CROATIA: ^HR[0-9]{2}[0-9]{7}[0-9]{10}$
   * @example CYPRUS: ^CY[0-9]{10}[0-9A-Z]{16}$
   * @example CZECH_REPUBLIC: ^CZ[0-9]{22}$
   * @example DENMARK: ^DK[0-9]{16}$
   * @example ESTONIA: ^EE[0-9]{18}$
   * @example FINLAND: ^FI[0-9]{16}$
   * @example FRANCE: ^FR[0-9]{12}[0-9A-Z]{11}[0-9]{2}$
   * @example GERMANY: ^DE[0-9]{20}$
   * @example GREECE: ^GR[0-9]{25}$
   * @example HUNGARY: ^HU[0-9]{26}$
   * @example IRELAND: ^IE[0-9]{2}[A-Z]{4}[0-9]{14}$
   * @example ITALY: ^IT[0-9]{2}[A-Z][0-9]{10}[0-9A-Z]{12}$
   * @example LATVIA: ^LV[0-9]{2}[A-Z]{4}[0-9A-Z]{13}$
   * @example LITHUANIA: ^LT[0-9]{18}$
   * @example LUXEMBOURG: ^LU[0-9]{18}$
   * @example MALTA: ^MT[0-9]{2}[A-Z]{4}[0-9]{5}[0-9A-Z]{18}$
   * @example NETHERLANDS: ^NL[0-9]{2}[A-Z]{4}[0-9]{10}$
   * @example NORWAY: ^NO[0-9]{13}$
   * @example POLAND: ^PL[0-9]{26}$
   * @example PORTUGAL: ^PT[0-9]{23}$
   * @example ROMANIA: ^RO[0-9]{2}[A-Z]{4}[0-9A-Z]{16}$
   * @example SLOVAKIA: ^SK[0-9]{22}$
   * @example SLOVENIA: ^SI56[0-9]{15}$
   * @example SPAIN: ^ES[0-9]{22}$
   * @example SWEDEN:* [0-9]{1,15}$
   * @example UNITED_KINGDOM: ^[0-9]{8}$
   */
  AccountNumber: string;
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * Your unique ID for the payout. If the MessageID is a previously initiated P2P order then the payout will be attached to that P2P order and the amount must be equal to or lower than the previously deposited amount.
   */
  MessageID: string;
  /**
   * The amount to send with exactly two decimals. Only digits. Use dot (.) as decimal separator. If the end-user holds a balance in the merchant's system then the amount must have been deducted from that balance before calling this method.
   */
  Amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
  [key: string]: unknown;
}

export interface RefundRequestData extends AbstractRequestData<RefundRequestDataAttributes> {
  /**
   * The OrderID of the initial deposit.
   */
  OrderID: string;
  /**
   * The amount to refund the customer with exactly two decimals. Only digits. Use dot (.) as decimal separator.
   */
  Amount: string;
  /**
   * The currency of the amount to refund the customer.
   */
  Currency: string;
  [key: string]: unknown;
}

export interface RefundDirectDebitRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the charge.
   * @example 9594811343
   */
  OrderID: number;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * The amount to deposit with exactly two decimals in the currency specified by Currency. Do not use this attribute in combination with<code>suggestedMinAmount</code> and <code>suggestedMaxAmount</code>. Only digits. Use dot (.) as decimal separator.
   */
  Amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
}

export interface MerchantSettlementRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * Your unique ID for the payout. If the MessageID is a previously initiated P2P order then the payout will be attached to that P2P order and the amount must be equal to or lower than the previously deposited amount.
   */
  MessageID: string;
  /**
   * The amount to send. See format in Handling currencies. Only digits. Use dot (.) as decimal separator. If the end-user holds a balance in the merchant's system then the amount must have been deducted from that balance before calling this method.
   */
  Amount: string;
  /**
   * The currency of the amount to send.
   */
  Currency: string;
}

export interface JsonRpcRequestParams<T extends AbstractRequestData<AbstractRequestDataAttributes>> {
  /**
   * The signature which validates your request to the Trustly server
   */
  Signature: string;
  /**
   * The unique identifier for this request
   */
  UUID: string;
  Data: T;
}

export interface ImportDirectDebitMandateRequestData extends AbstractRequestData<ImportDirectDebitMandateRequestDataAttributes> {
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
}

export interface GetWithdrawalsRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the charge.
   * @example 9594811343
   */
  OrderID: number;
}

export interface DirectPaymentBatchRequestData extends AbstractRequestData<DirectPaymentBatchRequestDataAttributes> {
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   */
  Currency?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the end-user's country. This will be used for pre-selecting the country for the end-user in the iframe.
   * Note: This will only have an effect for new end-users. If an end-user has done a previous order (with the same EndUserID), the country that was last used will be pre-selected.
   */
  Country?: string | undefined;
}

export interface DirectDebitRequestData extends AbstractRequestData<DirectDebitRequestDataAttributes> {
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   * @example 1234567890
   * @example 7653385737
   */
  AccountID: string;
  /**
   * This parameter in a way identifies the mandate you are to setup. If it's already used, you will receive an error, ERROR_MERCHANT_REFERENCE_ALREADY_EXISTS
   * which basically informs you that there's already a mandate with that reference.
   * <p>
   * [BACS]: The unique mandate reference. 6 - 10 characters consisting of A-Z and 0-9. Can not begin with DDIC and neither consists of the same characters, eg. AAAAAAA.
   * [Bankgiro]: The unique mandate reference. This must be numeric and unique for the payer, eg nationalId or similar can be used. Format needs to follow regexp [1-9][0-9]{5-15}
   * [SEPA-DD]: The unique mandate reference. This must be unique for the end-user for you as a merchant. Format needs to follow regexp [0-9,a-z,A-Z]{10-35}
   */
  MerchantReference?: string | undefined;
  /**
   * The amount to deposit with exactly two decimals in the currency specified by Currency. Do not use this attribute in combination with<code>suggestedMinAmount</code> and <code>suggestedMaxAmount</code>. Only digits. Use dot (.) as decimal separator.
   */
  Amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
  [key: string]: unknown;
}

export interface DirectDebitMandateRequestData extends AbstractRequestData<DirectDebitMandateRequestDataAttributes> {
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
}

export interface DirectCreditRequestData extends AbstractRequestData<DirectDebitRequestDataAttributes> {
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   * @example 1234567890
   * @example 7653385737
   */
  AccountID: string;
  /**
   * The branch identifier
   */
  BankIdentifier?: string | undefined;
  /**
   * The account number, identifying the end-user's account in the bank. Can be either IBAN or country-specific format, see examples or read more at https://developers.trustly.com/emea/docs/registeraccount
   */
  AccountNumber?: string | undefined;
  /**
   * The amount to deposit with exactly two decimals in the currency specified by Currency. Do not use this attribute in combination with<code>suggestedMinAmount</code> and <code>suggestedMaxAmount</code>. Only digits. Use dot (.) as decimal separator.
   */
  Amount?: string | undefined;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   */
  Currency?: string | undefined;
  /**
   * The ISO 3166-1-alpha-2 code of the end-user's country. This will be used for pre-selecting the country for the end-user in the iframe.
   * Note: This will only have an effect for new end-users. If an end-user has done a previous order (with the same EndUserID), the country that was last used will be pre-selected.
   */
  Country?: string | undefined;
}

export interface DepositRequestData extends AbstractRequestData<DepositRequestDataAttributes> {
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  [key: string]: unknown;
}

export interface DenyWithdrawalRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the charge.
   * @example 9594811343
   */
  OrderID: number;
}

export interface CreateAccountRequestData extends AbstractRequestData<CreateAccountRequestDataAttributes> {
  /**
   * ID, username, hash or anything uniquely identifying the end-user holding this account. Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * The clearing house of the end-user's bank account. Typically the name of a country in uppercase letters. See examples or table at https://developers.trustly.com/emea/docs/registeraccount.
   * @example AUSTRIA
   * @example BELGIUM
   * @example BULGARIA
   * @example CROATIA
   * @example CYPRUS
   * @example CZECH_REPUBLIC
   * @example DENMARK
   * @example ESTONIA
   * @example FINLAND
   * @example FRANCE
   * @example GERMANY
   * @example GREECE
   * @example HUNGARY
   * @example IRELAND
   * @example ITALY
   * @example LATVIA
   * @example LITHUANIA
   * @example LUXEMBOURG
   * @example MALTA
   * @example NETHERLANDS
   * @example NORWAY
   * @example POLAND
   * @example PORTUGAL
   * @example ROMANIA
   * @example SLOVAKIA
   * @example SLOVENIA
   * @example SPAIN
   * @example SWEDEN
   * @example UNITED_KINGDOM
   */
  ClearingHouse: string;
  /**
   * The bank number identifying the end-user's bank in the given clearing house. For bank accounts in IBAN format you should just provide an empty string (""). For non-IBAN format, see examples. The BankNumber for Swedish bank accounts should be the local "clearing number", and the AccountNumber parameter should contain the rest of the account number. Most Swedish banks have a 4-digit clearing number, but a 5-digit clearing number is used for Swedbank accounts when the clearing number starts with "8". Nordea accounts where the account number is the same as the person's national identification number always has "3300" as the clearing number.
   * <p>
   * IBAN for Swedish bank accounts is supported upon request. When making API calls with Swedish IBAN, ensure to include the Clearinghouse attribute as "IBAN" instead of "SWEDEN". See more at https://developers.trustly.com/emea/docs/registeraccount
   * @example Sweden: ^[0-9]{4,5}$
   * @example United Kingdom: ^[0-9]{6}$
   */
  BankNumber: string;
  /**
   * The account number, identifying the end-user's account in the bank. Can be either IBAN or country-specific format, see examples or read more at https://developers.trustly.com/emea/docs/registeraccount
   * @example 6112
   * @example 391124057
   * @example AUSTRIA: ^AT[0-9]{18}$
   * @example BELGIUM: ^BE[0-9]{14}$
   * @example BULGARIA: ^BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}$
   * @example CROATIA: ^HR[0-9]{2}[0-9]{7}[0-9]{10}$
   * @example CYPRUS: ^CY[0-9]{10}[0-9A-Z]{16}$
   * @example CZECH_REPUBLIC: ^CZ[0-9]{22}$
   * @example DENMARK: ^DK[0-9]{16}$
   * @example ESTONIA: ^EE[0-9]{18}$
   * @example FINLAND: ^FI[0-9]{16}$
   * @example FRANCE: ^FR[0-9]{12}[0-9A-Z]{11}[0-9]{2}$
   * @example GERMANY: ^DE[0-9]{20}$
   * @example GREECE: ^GR[0-9]{25}$
   * @example HUNGARY: ^HU[0-9]{26}$
   * @example IRELAND: ^IE[0-9]{2}[A-Z]{4}[0-9]{14}$
   * @example ITALY: ^IT[0-9]{2}[A-Z][0-9]{10}[0-9A-Z]{12}$
   * @example LATVIA: ^LV[0-9]{2}[A-Z]{4}[0-9A-Z]{13}$
   * @example LITHUANIA: ^LT[0-9]{18}$
   * @example LUXEMBOURG: ^LU[0-9]{18}$
   * @example MALTA: ^MT[0-9]{2}[A-Z]{4}[0-9]{5}[0-9A-Z]{18}$
   * @example NETHERLANDS: ^NL[0-9]{2}[A-Z]{4}[0-9]{10}$
   * @example NORWAY: ^NO[0-9]{13}$
   * @example POLAND: ^PL[0-9]{26}$
   * @example PORTUGAL: ^PT[0-9]{23}$
   * @example ROMANIA: ^RO[0-9]{2}[A-Z]{4}[0-9A-Z]{16}$
   * @example SLOVAKIA: ^SK[0-9]{22}$
   * @example SLOVENIA: ^SI56[0-9]{15}$
   * @example SPAIN: ^ES[0-9]{22}$
   * @example SWEDEN:* [0-9]{1,15}$
   * @example UNITED_KINGDOM: ^[0-9]{8}$
   */
  AccountNumber: string;
  /**
   * First name of the person, or the name of the organization/company.
   */
  Firstname: string;
  /**
   * Last name of the person (NULL/empty for organization/company).
   */
  Lastname: string;
}

export interface ChargeRequestData extends AbstractRequestData<ChargeRequestDataAttributes> {
  /**
   * The globally unique AccountID the account was assigned in our system. The AccountID of a returning customer. Allows for a quicker payment experience in some markets, see Trustly Express.
   * @example 1234567890
   * @example 7653385737
   */
  AccountID: string;
  /**
   * The URL to which notifications for this should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   * @example https://example.com/trustly/notification/a2b63j23dj23883jhfhfh
   */
  NotificationURL: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the deposit.
   * Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * Your unique ID of the transaction.
   * @example 12345678
   */
  MessageID: string;
  /**
   * @example BGN: 100.00
   * @example CZK: 100.00
   * @example DKK: 100.00
   * @example EUR: 100.00
   * @example GBP: 100.00
   * @example HRK: 100.00
   * @example HUF: 100
   * @example NOK: 100.00
   * @example PLN: 100.00
   * @example RON: 100.00
   * @example SEK: 100.00
   */
  Amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
}

export interface CancelDirectDebitRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  OrderID: string;
}

export interface CancelDirectDebitMandateRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the request.
   * @example 9594811343
   */
  OrderID: string;
}

export interface CancelChargeRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The OrderID of the Charge request that should be canceled.
   */
  OrderID: string;
}

export interface ApproveWithdrawalRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * The globally unique OrderID the charge order was assigned in our system. The order has no end-user interaction; it is merely used as a reference for the notifications delivered regarding the charge.
   * @example 9594811343
   */
  OrderID: number;
}

export interface AccountPayoutRequestData extends AbstractRequestData<AccountPayoutRequestDataAttributes> {
  /**
   * The URL to which notifications for this payment should be sent to. This URL should be hard to guess and not contain a ? ("question mark").
   */
  NotificationURL: string;
  /**
   * The AccountID received from an Account notification to which the money shall be sent.
   */
  AccountID: string;
  /**
   * ID, username, hash or anything uniquely identifying the end-user requesting the withdrawal. Preferably the same ID/username as used in the merchant's own backoffice in order to simplify for the merchant's support department.
   */
  EndUserID: string;
  /**
   * Your unique ID for the payout. If the MessageID is a previously initiated P2P order then the payout will be attached to that P2P order and the amount must be equal to or lower than the previously deposited amount.
   */
  MessageID: string;
  /**
   * The amount to send. Only digits. Use dot (.) as decimal separator. If the end-user holds a balance in the merchant's system then the amount must have been deducted from that balance before calling this method.
   */
  Amount: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
}

export interface AccountLedgerRequestData extends AbstractRequestData<AnyAttributes> {
  /**
   * Date string in the ISO 8601 format (YYYY-MM-DD)
   * @example 2014-04-01
   */
  FromDate: string;
  /**
   * Date string in the ISO 8601 format (YYYY-MM-DD)
   * @example 2014-04-01
   */
  ToDate: string;
  /**
   * The ISO 4217 code of the currency. See <a href="https://eu.developers.trustly.com/doc/reference/handling-currencies">documentation</a>
   * @example BGN
   * @example CZK
   * @example DKK
   * @example EUR
   * @example GBP
   * @example HRK
   * @example HUF
   * @example NOK
   * @example PLN
   * @example RON
   * @example SEK
   */
  Currency: string;
}

export type KYCNotificationParams = JsonRpcNotificationParams<KYCNotificationData>;
export type PayoutConfirmationNotificationParams = JsonRpcNotificationParams<PayoutConfirmationNotificationData>;
export type PayoutFailedNotificationParams = JsonRpcNotificationParams<PayoutFailedNotificationData>;
export type AccountNotificationParams = JsonRpcNotificationParams<AccountNotificationData>;
export type AccountMandateNotificationParams = JsonRpcNotificationParams<AccountMandateNotificationData>;
export type CancelNotificationParams = JsonRpcNotificationParams<CancelNotificationData>;
export type CancelSwishNotificationParams = JsonRpcNotificationParams<CancelSwishNotificationData>;
export type CancelDirectDebitNotificationParams = JsonRpcNotificationParams<CancelDirectDebitNotificationData>;
export type CancelDirectCreditNotificationParams = JsonRpcNotificationParams<CancelDirectCreditNotificationData>;
export type CancelRefundDirectDebitNotificationParams = JsonRpcNotificationParams<CancelRefundDirectDebitNotificationData>;
export type CancelMandateNotificationParams = JsonRpcNotificationParams<CancelMandateNotificationData>;
export type CancelDirectPaymentBatchNotificationParams = JsonRpcNotificationParams<CancelDirectPaymentBatchNotificationData>;
export type CreditNotificationParams = JsonRpcNotificationParams<CreditNotificationData>;
export type CreditDirectDebitNotificationParams = JsonRpcNotificationParams<CreditDirectDebitNotificationData>;
export type CreditDirectCreditNotificationParams = JsonRpcNotificationParams<CreditDirectCreditNotificationData>;
export type CreditRefundDirectDebitNotificationParams = JsonRpcNotificationParams<CreditRefundDirectDebitNotificationData>;
export type CreditSwishNotificationParams = JsonRpcNotificationParams<CreditSwishNotificationData>;
export type DebitNotificationParams = JsonRpcNotificationParams<DebitNotificationData>;
export type DebitDirectDebitNotificationParams = JsonRpcNotificationParams<DebitDirectDebitNotificationData>;
export type DebitDirectCreditNotificationParams = JsonRpcNotificationParams<DebitDirectCreditNotificationData>;
export type DebitRefundDirectDebitNotificationParams = JsonRpcNotificationParams<DebitRefundDirectDebitNotificationData>;
export type PendingNotificationParams = JsonRpcNotificationParams<PendingNotificationData>;
export type PendingDirectDebitNotificationParams = JsonRpcNotificationParams<PendingDirectDebitNotificationData>;
export type PendingDirectCreditNotificationParams = JsonRpcNotificationParams<PendingDirectCreditNotificationData>;
export type PendingRefundDirectDebitNotificationParams = JsonRpcNotificationParams<PendingRefundDirectDebitNotificationData>;
export type PendingDirectPaymentBatchNotificationParams = JsonRpcNotificationParams<PendingDirectPaymentBatchNotificationData>;

export interface JsonRpcNotification<TParams extends JsonRpcNotificationParams<unknown>, TMethod extends string> {
  readonly method: TMethod;
  params?: TParams | undefined;
  version: '1.1';
}

export type AccountLedgerResponseResult = ResponseResult<Array<AccountLedgerResponseDataEntry>, 'AccountLedger'>;
export type AccountPayoutResponseResult = ResponseResult<AccountPayoutResponseData, 'AccountPayout'>;
export type ApproveWithdrawalResponseResult = ResponseResult<ApproveWithdrawalResponseData, 'ApproveWithdrawal'>;
export type BalanceResponseResult = ResponseResult<Array<BalanceResponseDataEntry>, 'Balance'>;
export type ChargeResponseResult = ResponseResult<ChargeResponseData, 'Charge'>;
export type CancelChargeResponseResult = ResponseResult<CancelChargeResponseData, 'CancelCharge'>;
export type CreateAccountResponseResult = ResponseResult<CreateAccountResponseData, 'CreateAccount'>;
export type DenyWithdrawalResponseResult = ResponseResult<DenyWithdrawalResponseData, 'DenyWithdrawal'>;
export type DepositResponseResult = ResponseResult<DepositResponseData, 'Deposit'>;
export type GetWithdrawalsResponseResult = ResponseResult<Array<GetWithdrawalsResponseDataEntry>, 'GetWithdrawals'>;
export type MerchantSettlementResponseResult = ResponseResult<MerchantSettlementResponseData, 'MerchantSettlement'>;
export type RefundResponseResult = ResponseResult<RefundResponseData, 'Refund'>;
export type RegisterAccountResponseResult = ResponseResult<RegisterAccountResponseData, 'RegisterAccount'>;
export type RegisterAccountPayoutResponseResult = ResponseResult<RegisterAccountPayoutResponseData, 'RegisterAccountPayout'>;
export type SelectAccountResponseResult = ResponseResult<SelectAccountResponseData, 'SelectAccount'>;
export type SettlementReportResponseResult = ResponseResult<SettlementReportResponseData, 'SettlementReport'>;
export type SwishResponseResult = ResponseResult<SwishResponseData, 'Swish'>;
export type WithdrawResponseResult = ResponseResult<WithdrawResponseData, 'Withdraw'>;
export type DirectDebitMandateResponseResult = ResponseResult<DirectDebitMandateResponseData, 'DirectDebitMandate'>;
export type CancelDirectDebitMandateResponseResult = ResponseResult<CancelDirectDebitMandateResponseData, 'CancelDirectDebitMandate'>;
export type ImportDirectDebitMandateResponseResult = ResponseResult<ImportDirectDebitMandateResponseData, 'ImportDirectDebitMandate'>;
export type DirectDebitResponseResult = ResponseResult<DirectDebitResponseData, 'DirectDebit'>;
export type CancelDirectDebitResponseResult = ResponseResult<CancelDirectDebitResponseData, 'CancelDirectDebit'>;
export type DirectCreditResponseResult = ResponseResult<DirectCreditResponseData, 'DirectCredit'>;
export type RefundDirectDebitResponseResult = ResponseResult<RefundDirectDebitResponseData, 'RefundDirectDebit'>;
export type DirectPaymentBatchResponseResult = ResponseResult<DirectPaymentBatchResponseData, 'DirectPaymentBatch'>;
export type KYCNotificationResponseResult = ResponseResult<KYCNotificationResponseData, 'kyc'>;
export type PayoutConfirmationNotificationResponseResult = ResponseResult<AckData, 'payoutconfirmation'>;
export type PayoutFailedNotificationResponseResult = ResponseResult<AckData, 'payoutfailed'>;
export type AccountNotificationResponseResult = ResponseResult<AckData, 'account'>;
export type AccountMandateNotificationResponseResult = ResponseResult<AckData, 'account'>;
export type CancelNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CancelSwishNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CancelDirectDebitNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CancelDirectCreditNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CancelRefundDirectDebitNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CancelMandateNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CancelDirectPaymentBatchNotificationResponseResult = ResponseResult<AckData, 'cancel'>;
export type CreditNotificationResponseResult = ResponseResult<AckData, 'credit'>;
export type CreditDirectDebitNotificationResponseResult = ResponseResult<AckData, 'credit'>;
export type CreditDirectCreditNotificationResponseResult = ResponseResult<AckData, 'credit'>;
export type CreditRefundDirectDebitNotificationResponseResult = ResponseResult<AckData, 'credit'>;
export type CreditSwishNotificationResponseResult = ResponseResult<AckData, 'credit'>;
export type DebitNotificationResponseResult = ResponseResult<DebitNotificationResponseData, 'debit'>;
export type DebitDirectDebitNotificationResponseResult = ResponseResult<DebitNotificationResponseData, 'debit'>;
export type DebitDirectCreditNotificationResponseResult = ResponseResult<DebitNotificationResponseData, 'debit'>;
export type DebitRefundDirectDebitNotificationResponseResult = ResponseResult<DebitNotificationResponseData, 'debit'>;
export type PendingNotificationResponseResult = ResponseResult<AckData, 'pending'>;
export type PendingDirectDebitNotificationResponseResult = ResponseResult<AckData, 'pending'>;
export type PendingDirectCreditNotificationResponseResult = ResponseResult<AckData, 'pending'>;
export type PendingRefundDirectDebitNotificationResponseResult = ResponseResult<AckData, 'pending'>;
export type PendingDirectPaymentBatchNotificationResponseResult = ResponseResult<AckData, 'pending'>;

export interface JsonRpcResponse<T extends ResponseResult<unknown, string>> {
  readonly version?: '1.1' | undefined;
  error?: null | undefined;
  result: T;
}

export interface JsonRpcErrorError extends ResponseResult<JsonRpcErrorErrorData, string> {
  [key: string]: unknown;
}

export interface JsonRpcError {
  code?: number | undefined;
  message?: string | undefined;
  error?: JsonRpcErrorError | undefined;
  name?: 'JSONRPCError' | undefined;
}

export type AccountLedgerRequestParams = JsonRpcRequestParams<AccountLedgerRequestData>;
export type AccountPayoutRequestParams = JsonRpcRequestParams<AccountPayoutRequestData>;
export type ApproveWithdrawalRequestParams = JsonRpcRequestParams<ApproveWithdrawalRequestData>;
export type BalanceRequestParams = JsonRpcRequestParams<BalanceRequestData>;
export type ChargeRequestParams = JsonRpcRequestParams<ChargeRequestData>;
export type CancelChargeRequestParams = JsonRpcRequestParams<CancelChargeRequestData>;
export type CreateAccountRequestParams = JsonRpcRequestParams<CreateAccountRequestData>;
export type DenyWithdrawalRequestParams = JsonRpcRequestParams<DenyWithdrawalRequestData>;
export type DepositRequestParams = JsonRpcRequestParams<DepositRequestData>;
export type GetWithdrawalsRequestParams = JsonRpcRequestParams<GetWithdrawalsRequestData>;
export type MerchantSettlementRequestParams = JsonRpcRequestParams<MerchantSettlementRequestData>;
export type RefundRequestParams = JsonRpcRequestParams<RefundRequestData>;
export type RegisterAccountRequestParams = JsonRpcRequestParams<RegisterAccountRequestData>;
export type RegisterAccountPayoutRequestParams = JsonRpcRequestParams<RegisterAccountPayoutRequestData>;
export type SelectAccountRequestParams = JsonRpcRequestParams<SelectAccountRequestData>;
export type SettlementReportRequestParams = JsonRpcRequestParams<SettlementReportRequestData>;
export type SwishRequestParams = JsonRpcRequestParams<SwishRequestData>;
export type WithdrawRequestParams = JsonRpcRequestParams<WithdrawRequestData>;
export type DirectDebitMandateRequestParams = JsonRpcRequestParams<DirectDebitMandateRequestData>;
export type CancelDirectDebitMandateRequestParams = JsonRpcRequestParams<CancelDirectDebitMandateRequestData>;
export type ImportDirectDebitMandateRequestParams = JsonRpcRequestParams<ImportDirectDebitMandateRequestData>;
export type DirectDebitRequestParams = JsonRpcRequestParams<DirectDebitRequestData>;
export type CancelDirectDebitRequestParams = JsonRpcRequestParams<CancelDirectDebitRequestData>;
export type DirectCreditRequestParams = JsonRpcRequestParams<DirectCreditRequestData>;
export type RefundDirectDebitRequestParams = JsonRpcRequestParams<RefundDirectDebitRequestData>;
export type DirectPaymentBatchRequestParams = JsonRpcRequestParams<DirectPaymentBatchRequestData>;

export interface JsonRpcRequest<TParams extends JsonRpcRequestParams<AbstractRequestData<AbstractRequestDataAttributes>>, TMethod extends string> {
  readonly method: TMethod;
  params?: TParams | undefined;
  version: '1.1';
}

export type ErrorUnknownError = JsonRpcError;
export type KYCNotification = JsonRpcNotification<KYCNotificationParams, 'kyc'>;
export type PayoutConfirmationNotification = JsonRpcNotification<PayoutConfirmationNotificationParams, 'payoutconfirmation'>;
export type PayoutFailedNotification = JsonRpcNotification<PayoutFailedNotificationParams, 'payoutfailed'>;
export type AccountNotification = JsonRpcNotification<AccountNotificationParams, 'account'>;
export type AccountMandateNotification = JsonRpcNotification<AccountMandateNotificationParams, 'account'>;
export type CancelNotification = JsonRpcNotification<CancelNotificationParams, 'cancel'>;
export type CancelSwishNotification = JsonRpcNotification<CancelSwishNotificationParams, 'cancel'>;
export type CancelDirectDebitNotification = JsonRpcNotification<CancelDirectDebitNotificationParams, 'cancel'>;
export type CancelDirectCreditNotification = JsonRpcNotification<CancelDirectCreditNotificationParams, 'cancel'>;
export type CancelRefundDirectDebitNotification = JsonRpcNotification<CancelRefundDirectDebitNotificationParams, 'cancel'>;
export type CancelMandateNotification = JsonRpcNotification<CancelMandateNotificationParams, 'cancel'>;
export type CancelDirectPaymentBatchNotification = JsonRpcNotification<CancelDirectPaymentBatchNotificationParams, 'cancel'>;
export type CreditNotification = JsonRpcNotification<CreditNotificationParams, 'credit'>;
export type CreditDirectDebitNotification = JsonRpcNotification<CreditDirectDebitNotificationParams, 'credit'>;
export type CreditDirectCreditNotification = JsonRpcNotification<CreditDirectCreditNotificationParams, 'credit'>;
export type CreditRefundDirectDebitNotification = JsonRpcNotification<CreditRefundDirectDebitNotificationParams, 'credit'>;
export type CreditSwishNotification = JsonRpcNotification<CreditSwishNotificationParams, 'credit'>;
export type DebitNotification = JsonRpcNotification<DebitNotificationParams, 'debit'>;
export type DebitDirectDebitNotification = JsonRpcNotification<DebitDirectDebitNotificationParams, 'debit'>;
export type DebitDirectCreditNotification = JsonRpcNotification<DebitDirectCreditNotificationParams, 'debit'>;
export type DebitRefundDirectDebitNotification = JsonRpcNotification<DebitRefundDirectDebitNotificationParams, 'debit'>;
export type PendingNotification = JsonRpcNotification<PendingNotificationParams, 'pending'>;
export type PendingDirectDebitNotification = JsonRpcNotification<PendingDirectDebitNotificationParams, 'pending'>;
export type PendingDirectCreditNotification = JsonRpcNotification<PendingDirectCreditNotificationParams, 'pending'>;
export type PendingRefundDirectDebitNotification = JsonRpcNotification<PendingRefundDirectDebitNotificationParams, 'pending'>;
export type PendingDirectPaymentBatchNotification = JsonRpcNotification<PendingDirectPaymentBatchNotificationParams, 'pending'>;
export type ErrorUnknown = JsonRpcErrorResponse;
export type AccountLedgerResponse = JsonRpcResponse<AccountLedgerResponseResult>;
export type AccountPayoutResponse = JsonRpcResponse<AccountPayoutResponseResult>;
export type ApproveWithdrawalResponse = JsonRpcResponse<ApproveWithdrawalResponseResult>;
export type BalanceResponse = JsonRpcResponse<BalanceResponseResult>;
export type ChargeResponse = JsonRpcResponse<ChargeResponseResult>;
export type CancelChargeResponse = JsonRpcResponse<CancelChargeResponseResult>;
export type CreateAccountResponse = JsonRpcResponse<CreateAccountResponseResult>;
export type DenyWithdrawalResponse = JsonRpcResponse<DenyWithdrawalResponseResult>;
export type DepositResponse = JsonRpcResponse<DepositResponseResult>;
export type GetWithdrawalsResponse = JsonRpcResponse<GetWithdrawalsResponseResult>;
export type MerchantSettlementResponse = JsonRpcResponse<MerchantSettlementResponseResult>;
export type RefundResponse = JsonRpcResponse<RefundResponseResult>;
export type RegisterAccountResponse = JsonRpcResponse<RegisterAccountResponseResult>;
export type RegisterAccountPayoutResponse = JsonRpcResponse<RegisterAccountPayoutResponseResult>;
export type SelectAccountResponse = JsonRpcResponse<SelectAccountResponseResult>;
export type SettlementReportResponse = JsonRpcResponse<SettlementReportResponseResult>;
export type SwishResponse = JsonRpcResponse<SwishResponseResult>;
export type WithdrawResponse = JsonRpcResponse<WithdrawResponseResult>;
export type DirectDebitMandateResponse = JsonRpcResponse<DirectDebitMandateResponseResult>;
export type CancelDirectDebitMandateResponse = JsonRpcResponse<CancelDirectDebitMandateResponseResult>;
export type ImportDirectDebitMandateResponse = JsonRpcResponse<ImportDirectDebitMandateResponseResult>;
export type DirectDebitResponse = JsonRpcResponse<DirectDebitResponseResult>;
export type CancelDirectDebitResponse = JsonRpcResponse<CancelDirectDebitResponseResult>;
export type DirectCreditResponse = JsonRpcResponse<DirectCreditResponseResult>;
export type RefundDirectDebitResponse = JsonRpcResponse<RefundDirectDebitResponseResult>;
export type DirectPaymentBatchResponse = JsonRpcResponse<DirectPaymentBatchResponseResult>;
export type KYCNotificationResponse = JsonRpcResponse<KYCNotificationResponseResult>;
export type PayoutConfirmationNotificationResponse = JsonRpcResponse<PayoutConfirmationNotificationResponseResult>;
export type PayoutFailedNotificationResponse = JsonRpcResponse<PayoutFailedNotificationResponseResult>;
export type AccountNotificationResponse = JsonRpcResponse<AccountNotificationResponseResult>;
export type AccountMandateNotificationResponse = JsonRpcResponse<AccountMandateNotificationResponseResult>;
export type CancelNotificationResponse = JsonRpcResponse<CancelNotificationResponseResult>;
export type CancelSwishNotificationResponse = JsonRpcResponse<CancelSwishNotificationResponseResult>;
export type CancelDirectDebitNotificationResponse = JsonRpcResponse<CancelDirectDebitNotificationResponseResult>;
export type CancelDirectCreditNotificationResponse = JsonRpcResponse<CancelDirectCreditNotificationResponseResult>;
export type CancelRefundDirectDebitNotificationResponse = JsonRpcResponse<CancelRefundDirectDebitNotificationResponseResult>;
export type CancelMandateNotificationResponse = JsonRpcResponse<CancelMandateNotificationResponseResult>;
export type CancelDirectPaymentBatchNotificationResponse = JsonRpcResponse<CancelDirectPaymentBatchNotificationResponseResult>;
export type CreditNotificationResponse = JsonRpcResponse<CreditNotificationResponseResult>;
export type CreditDirectDebitNotificationResponse = JsonRpcResponse<CreditDirectDebitNotificationResponseResult>;
export type CreditDirectCreditNotificationResponse = JsonRpcResponse<CreditDirectCreditNotificationResponseResult>;
export type CreditRefundDirectDebitNotificationResponse = JsonRpcResponse<CreditRefundDirectDebitNotificationResponseResult>;
export type CreditSwishNotificationResponse = JsonRpcResponse<CreditSwishNotificationResponseResult>;
export type DebitNotificationResponse = JsonRpcResponse<DebitNotificationResponseResult>;
export type DebitDirectDebitNotificationResponse = JsonRpcResponse<DebitDirectDebitNotificationResponseResult>;
export type DebitDirectCreditNotificationResponse = JsonRpcResponse<DebitDirectCreditNotificationResponseResult>;
export type DebitRefundDirectDebitNotificationResponse = JsonRpcResponse<DebitRefundDirectDebitNotificationResponseResult>;
export type PendingNotificationResponse = JsonRpcResponse<PendingNotificationResponseResult>;
export type PendingDirectDebitNotificationResponse = JsonRpcResponse<PendingDirectDebitNotificationResponseResult>;
export type PendingDirectCreditNotificationResponse = JsonRpcResponse<PendingDirectCreditNotificationResponseResult>;
export type PendingRefundDirectDebitNotificationResponse = JsonRpcResponse<PendingRefundDirectDebitNotificationResponseResult>;
export type PendingDirectPaymentBatchNotificationResponse = JsonRpcResponse<PendingDirectPaymentBatchNotificationResponseResult>;
export type AccountLedgerRequest = JsonRpcRequest<AccountLedgerRequestParams, 'AccountLedger'>;
export type AccountPayoutRequest = JsonRpcRequest<AccountPayoutRequestParams, 'AccountPayout'>;
export type ApproveWithdrawalRequest = JsonRpcRequest<ApproveWithdrawalRequestParams, 'ApproveWithdrawal'>;
export type BalanceRequest = JsonRpcRequest<BalanceRequestParams, 'Balance'>;
export type ChargeRequest = JsonRpcRequest<ChargeRequestParams, 'Charge'>;
export type CancelChargeRequest = JsonRpcRequest<CancelChargeRequestParams, 'CancelCharge'>;
export type CreateAccountRequest = JsonRpcRequest<CreateAccountRequestParams, 'CreateAccount'>;
export type DenyWithdrawalRequest = JsonRpcRequest<DenyWithdrawalRequestParams, 'DenyWithdrawal'>;
export type DepositRequest = JsonRpcRequest<DepositRequestParams, 'Deposit'>;
export type GetWithdrawalsRequest = JsonRpcRequest<GetWithdrawalsRequestParams, 'GetWithdrawals'>;
export type MerchantSettlementRequest = JsonRpcRequest<MerchantSettlementRequestParams, 'MerchantSettlement'>;
export type RefundRequest = JsonRpcRequest<RefundRequestParams, 'Refund'>;
export type RegisterAccountRequest = JsonRpcRequest<RegisterAccountRequestParams, 'RegisterAccount'>;
export type RegisterAccountPayoutRequest = JsonRpcRequest<RegisterAccountPayoutRequestParams, 'RegisterAccountPayout'>;
export type SelectAccountRequest = JsonRpcRequest<SelectAccountRequestParams, 'SelectAccount'>;
export type SettlementReportRequest = JsonRpcRequest<SettlementReportRequestParams, 'SettlementReport'>;
export type SwishRequest = JsonRpcRequest<SwishRequestParams, 'Swish'>;
export type WithdrawRequest = JsonRpcRequest<WithdrawRequestParams, 'Withdraw'>;
export type DirectDebitMandateRequest = JsonRpcRequest<DirectDebitMandateRequestParams, 'DirectDebitMandate'>;
export type CancelDirectDebitMandateRequest = JsonRpcRequest<CancelDirectDebitMandateRequestParams, 'CancelDirectDebitMandate'>;
export type ImportDirectDebitMandateRequest = JsonRpcRequest<ImportDirectDebitMandateRequestParams, 'ImportDirectDebitMandate'>;
export type DirectDebitRequest = JsonRpcRequest<DirectDebitRequestParams, 'DirectDebit'>;
export type CancelDirectDebitRequest = JsonRpcRequest<CancelDirectDebitRequestParams, 'CancelDirectDebit'>;
export type DirectCreditRequest = JsonRpcRequest<DirectCreditRequestParams, 'DirectCredit'>;
export type RefundDirectDebitRequest = JsonRpcRequest<RefundDirectDebitRequestParams, 'RefundDirectDebit'>;
export type DirectPaymentBatchRequest = JsonRpcRequest<DirectPaymentBatchRequestParams, 'DirectPaymentBatch'>;
export type AbstractNotificationResponse = object;
